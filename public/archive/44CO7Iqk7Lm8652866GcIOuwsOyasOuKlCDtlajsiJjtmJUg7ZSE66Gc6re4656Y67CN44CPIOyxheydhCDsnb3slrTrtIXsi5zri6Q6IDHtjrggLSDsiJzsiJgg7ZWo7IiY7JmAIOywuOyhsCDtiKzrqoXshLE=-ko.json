{"content":"<body>\n<h1>함수형 프로그래밍이란 무엇인가?</h1>\n<p>이 글은 『스칼라로 배우는 함수형 프로그래밍』 책의 1장을 기반으로 함수형 프로그래밍의 기본 개념을 소개합니다.</p>\n\n<h2>주요 개념</h2>\n<ul>\n  <li><strong>계산 vs. 액션 (computation vs. action)</strong>: 프로그램의 핵심 로직과 외부와의 상호작용을 구분합니다.</li>\n  <li><strong>순수 함수 (pure function)</strong>: 동일한 입력에 대해 항상 동일한 출력을 반환하고, 외부 상태를 변경하지 않는 함수입니다.</li>\n  <li><strong>부수 효과 (side effect)</strong>: 함수 실행으로 인해 발생하는 계산 결과 외의 모든 변화를 의미합니다. (예: 콘솔 출력, 파일 쓰기)</li>\n  <li><strong>참조 투명성 (referential transparency)</strong>: 프로그램 내에서 어떤 표현식을 평가 값으로 대체해도 프로그램의 결과가 동일하게 유지되는 성질입니다.</li>\n</ul>\n\n<h2>순수 함수 예시 및 리팩터링</h2>\n<p>계산과 액션이 혼합된 함수를 순수 함수와 액션으로 분리하는 과정을 보여줍니다.</p>\n<ul>\n  <li><strong>초기 함수</strong>: 제곱 계산과 콘솔 출력이 함께 이루어짐.</li>\n  <li><strong>리팩터링 1</strong>: 제곱 계산 로직을 <code>calculateSquare()</code> 함수로 분리.</li>\n  <li><strong>리팩터링 2</strong>: 메시지 생성 로직을 <code>calculateMessage()</code> 함수로 분리하여 계산 부분만 남김.</li>\n</ul>\n\n<h2>함수형 프로그래밍의 이점</h2>\n<ul>\n  <li><strong>코드 가독성 및 유지보수성 향상</strong>: 순수성과 참조 투명성으로 코드의 의도가 명확해지고, 함수 외부의 영향을 고려할 필요가 없어집니다.</li>\n  <li><strong>디버깅 및 테스트 용이성</strong>: 순수 함수는 독립적으로 테스트 가능하며, 예상치 못한 결과 발생 시 해당 함수만 집중적으로 분석할 수 있습니다.</li>\n</ul>\n\n<h2>참조 투명성과 치환 모형</h2>\n<p>참조 투명성이란 동일한 입력에 대해 항상 동일한 결과를 반환하는 성질을 의미합니다. 이를 통해 <code>f(x)</code>를 <code>x*x</code>와 같은 함수 본문으로 치환하여 등식적 추론이 가능해집니다.</p>\n\n<h2>등식적 추론이 불가능한 함수</h2>\n<p>다음과 같은 함수들은 참조 투명성을 위반하여 등식적 추론이 불가능합니다.</p>\n<ul>\n  <li>외부 상태에 의존하거나 상태를 변경하는 함수 (예: 전역 변수 변경)</li>\n  <li>순수하지 않은 동작 (부수 효과)을 포함하는 함수 (예: 콘솔 출력, 파일 입출력)</li>\n  <li>예외를 던지는 함수</li>\n  <li>종료되지 않는 함수 (무한 루프)</li>\n  <li>현재 시간 또는 임의의 값을 반환하는 함수</li>\n  <li>외부 자원(파일, DB)에 의존하는 함수</li>\n  <li>사용자 입력에 의존하는 함수</li>\n  <li>네트워크 호출을 수행하는 함수</li>\n</ul>\n<p><strong>핵심 정리</strong>: 등식적 추론이 안 되는 함수 = 참조 투명하지 않은 함수 = 순수하지 않은 함수 = 부수 효과가 있는 함수</p>\n\n<h2>프로그램 작성 전략</h2>\n<p>함수형 프로그래밍은 가능한 순수 함수를 합성하여 프로그램을 작성하고, 부수 효과는 가능한 마지막 순간까지 유예하는 방식으로 진행됩니다. 모나드와 같은 개념이 함수 합성을 돕는 도구로 활용됩니다.</p>\n</body>\n```","createdAt":"2025-08-12T16:22:50.040Z","language":"ko"}