{"content":"<body>\n<p>본문은 멀티 테넌트 서비스에서 테넌트 데이터 격리 방법과 격리 수준을 높이는 방법에 대해 설명합니다. 테넌트는 하나의 플랫폼을 사용하는 사용자, 조직, 프로젝트를 의미하며, 클라우드 서비스는 각 테넌트에게 독립적인 데이터 접근 및 관리 기능을 제공합니다.</p>\n\n<h2>1. 테넌트 데이터 격리</h2>\n<p>테넌트 데이터 격리 수준은 크게 세 가지로 나뉩니다.</p>\n<ul>\n  <li><b>레벨 1 - 행 단위:</b> 하나의 데이터베이스, 하나의 테이블에 테넌트 아이디를 부여하여 행 단위로 격리합니다.</li>\n  <li><b>레벨 2 - 테이블 단위:</b> 하나의 데이터베이스에서 테넌트 단위로 분리된 테이블에 저장합니다.</li>\n  <li><b>레벨 3 - 데이터베이스 단위:</b> 각 테넌트별로 분리된 데이터베이스에 저장합니다.</li>\n</ul>\n<p>레벨 3이 격리 수준이 가장 높지만 비용이 많이 들고, 레벨 1은 격리 수준이 낮지만 비용이 저렴합니다.</p>\n\n<h2>2. 레벨 1, 행 단위 격리 수준의 장단점 및 개선 방법</h2>\n<h3>장점:</h3>\n<ul>\n  <li>비용 절감: 적은 자원으로 많은 테넌트를 수용할 수 있어 경제적입니다.</li>\n</ul>\n<h3>단점:</h3>\n<ul>\n  <li>보안 위험 증가: 다른 테넌트 데이터 접근 위험이 있으며, 금융/공공 산업에서는 도입을 꺼릴 수 있습니다.</li>\n  <li>성능 저하: 시끄러운 이웃 효과로 인해 특정 테넌트가 전체 성능을 저하시킬 수 있습니다.</li>\n</ul>\n<h3>개선 방법:</h3>\n<ul>\n  <li><b>테넌트 아이디 강제화:</b> 애플리케이션 개발 시 항상 테넌트 아이디를 사용하도록 강제합니다.\n    <ul>\n      <li><b>실패 사례:</b> 쿼리에서 테넌트 아이디를 누락하면 다른 테넌트 데이터를 조회할 수 있습니다.</li>\n      <li><b>성공 사례:</b> 쿼리에 <code>tenant_id</code>를 포함하여 테넌트 아이디 사용을 강제합니다.</li>\n    </ul>\n  </li>\n  <li><b>기술적 접근:</b>\n    <ul>\n      <li>애플리케이션 레벨: JDBC DataSource 확장, Spring AOP/AspectJ</li>\n      <li>시스템 아키텍처 레벨: Apache ShardingSphere</li>\n    </ul>\n  </li>\n  <li><b>JDBC DataSource Wrapper 구현:</b> 쿼리 실행 시 <code>tenant_id</code>를 검증하는 Wrapper 클래스를 구현하고 Spring BeanPostProcessor를 이용해 적용합니다.</li>\n</ul>\n\n<h2>3. 테넌트 데이터 보호</h2>\n<p>데이터 격리 실패 시 리스크를 최소화하기 위해 테넌트별 고유 키로 데이터를 암호화합니다.</p>\n<ul>\n  <li><b>테넌트 아이디를 이용한 암호화:</b> 단순하지만 보안에 취약할 수 있습니다.</li>\n  <li><b>외부 키 관리 서비스를 이용한 암호화:</b> NHN Cloud SKM, Vault, AWS KMS 등을 활용하여 보안을 강화할 수 있습니다.</li>\n</ul>\n\n<h2>결론</h2>\n<p>멀티 테넌트 환경에서 데이터 격리는 신뢰성 있는 서비스를 위해 필수적입니다. 격리 수준 선택, 테넌트 아이디 강제화, 테넌트별 암호화 등 다양한 방법을 통해 보안성을 높이고 비용 효율성 및 성능과의 균형을 맞춰야 합니다.</p>\n</body>","createdAt":"2025-08-12T16:21:53.682Z","language":"ko"}