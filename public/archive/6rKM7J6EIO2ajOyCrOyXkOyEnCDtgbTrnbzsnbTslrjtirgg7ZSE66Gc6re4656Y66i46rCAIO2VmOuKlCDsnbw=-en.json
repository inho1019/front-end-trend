{"content":"Introduction\nHello, I am Jisun Park, a client programmer working on Cookie Run Kingdom for four years.\nWhen I was preparing for job applications, I didn't really know what a client programmer specifically did.\nWhen I searched on search engines, I often came across simple definitions like, \"Server programmers build servers that store user data, and client programmers implement the visible game.\"\nHowever, in actual practice, the work of a client programmer is much more diverse than this.\nIn addition to implementing the visible game, they work closely with other job roles, develop tools, manage resources, and handle the game engine, taking on various tasks throughout game development.\nTherefore, I hope this article will be of some help to job seekers who are studying to become client programmers, and I would like to talk specifically about what client programmers do by following the content development flow, using actual content I implemented as an example.\nOf course, development cultures and methods can vary by company and team, so the content introduced in this article may not apply equally to all game companies. It can also differ within the same team depending on whether you are creating cookies, combat content, or kingdom content. Please keep this in mind and read this as a practical example.\n\nGame Company Organizational Structure and Job Descriptions\nBefore I begin, I'll give a brief explanation for those who don't know what job roles exist in a game company. If you already know this, you can skip to the next chapter.\nVarious job roles are part of the game development team. While the titles and specific compositions may differ depending on the company or project, they are typically divided into the following roles.\nPD (Project Director): Oversees the overall direction and quality of the project.\nPM (Project Manager): Responsible for all project development management, release, and operation, as well as communication with external organizations.\nServer Programmer: Builds the game's backend, manages user data, and handles server-client communication.\nClient Programmer: Designs the game's structure and implements it so that the game actually works by naturally connecting resources and data created by various job roles.\nStory: Composes the overall narrative of the game, including characters and the entire storyline. In Cookie Run Kingdom, all text that appears throughout the game, such as for decoration items, package products, and event messages, goes through the story team.\nArt: Designs concepts and characters that match the story and produces the resources used in the game. In Cookie Run Kingdom, it is composed of three teams: background art, character art, and illustration art.\nUIUX: Designs the interface and user experience based on art resources and planning documents. They also manage and assemble project resources to create prefabs.\nüí° What is a prefab?\nA prefab is a reusable object template in Unity. It is useful for consistent UI composition or object placement.\nEffects: Creates visual effects such as combat animations and UI effects.\nMotion: Applies lifelike motion to characters and objects.\nPlanning: Designs the overall game systems, content, and balance. In Cookie Run Kingdom, it is composed of four teams: kingdom content planning, combat content planning, system planning, and character planning.\nQA (Quality Assurance): Tests whether functions operate according to the planning intent and provides feedback based on the actual user experience.\nAs you can see, various job roles work closely together to create a single game and complete the project.\n\nUpdates and Work Routine\nWhile thinking about how to better explain the work of a client programmer, I decided it would be good to explain it through a practical example, following the game update and work routine.\n\nThis is a play video of the jumping platform mini-game. If you cannot see the video, please imagine a game where a cookie jumps on platforms and avoids obstacles.\nIf you have played Cookie Run Kingdom consistently, you might recognize this mini-game. This was a mini-game content called 'Jungle Warrior Cookie's Berry Berry High High!' that I worked on and was updated on June 4, 2025. Let's look back at the process through which this content was developed. For your reference, 'jumping platform' is a development name arbitrarily decided by the workers. The content's name is written later in the development process by the story team, incorporating the IP's unique tone and manner and conveying system intuition.\nüìã Content Decision\nCookie Run Kingdom has a general update plan set annually, led by the PD, story team, and art team. According to that plan, they decide which story and content will be included in this update. Based on a scene in the Beast Episode story where Jungle Warrior Cookie climbs a tree to pick berries, it was decided to make it into a mini-game.\nü§ùüèª Top-Level Direction & Detailed Planning Meetings\nThese meetings are primarily led by the PD and the planning team. They discuss the direction of the experience the content will provide and the composition of the mini-game. Client programmers are not significantly involved at this stage. They only grasp that such content is planned and then assign personnel or check for implementation feasibility. Implementation feasibility here refers to checking if there is sufficient time for production and if it is technically possible.\nüèÉüèª Kick-off Meeting\nAfter the direction is set, the planning team creates a kick-off planning document. The kick-off meeting is for the actual workers, and work begins in earnest after this meeting. In the meeting, centered around the planner, server and client programmers, art, UIUX, and effects teams all attend to check the specific specifications for content implementation. After the meeting, the PM team checks and coordinates the work schedules for each role. The client programmer's role in the kick-off meeting is very important. Client programmers assemble a Gundam after server, data, and resource work are all completed. It's crucial to avoid situations where parts don't fit, preventing assembly. Therefore, participating in the design in advance and leading it ensures there are no subsequent work disruptions. They suggest work directions to ensure resources are created in the desired format, as follows.\nArt ‚áí \"We plan to use image resources of this size repeatedly, so please produce them this way.\"\nUIUX ‚áí \"Please create prefabs with this structure.\"\nEffects ‚áí \"This object will be in WorldSpace, not Canvas, so please create it as a regular effect, not a UI effect.\"\nüíΩ Data Structure Meeting\nCookie Run Kingdom uses Excel for game data. Since both the server and client use Excel data, discussions are needed on how to input data into Excel. This meeting is primarily held when a new data structure needs to be designed for new content.\nüõ†Ô∏è Tool Development\nBefore starting the full-scale development of the jumping platform game, a map tool was needed by the planning team, leading to tool development. This tool randomly generates map data according to defined rules, allows visual confirmation of the results through the Unity editor, and enables users to adjust platform positions and types as desired.\n\nWhen you input probabilities as desired, it generates maps accordingly.\nPreviously, maps had to be completed by inputting data one by one, but with the tool, random generation is possible with a single click, and you can adjust desired probabilities in real-time and see the results immediately. Tool development goes beyond simple convenience features and is one of the main tasks of client programmers that increases the development efficiency and stability of the entire project. While only one map tool for the jumping platform game is given as an example here, Cookie Run Kingdom produces and uses numerous other tools. The benefits of tools are as follows:\nAutomation of Repetitive Tasks: Allows repetitive tasks that would normally require manual effort to be completed with a few clicks.\nError Prevention: Human work is prone to errors, but tools can detect potential errors when handling data or resources in advance.\nImproved Collaboration Efficiency: Reduces repetitive communication costs as workers can test themselves without requesting assistance from other job roles.\nFacilitation of Balancing: Enables rapid modification and testing of data, greatly contributing to improved balance and quality.\nüèóÔ∏è Start of Work\nNow, full-scale development has begun. Experienced client programmers might already have imagined the code, assuming server or data work is finished and resources are all prepared! However, usually, the process follows these steps. Some tasks are performed independently by each job role, while others are not. To summarize simply:\n\nClient programmers constantly communicate and coordinate work with all job roles during this process. The client programmer's role is to gather the results of each job role's work and implement them so they function within the actual game.\n1. Data & Server Work\nWhen work begins, the planning team first provides preliminary data. Once the preliminary data work is completed, the server starts working and provides a server reflecting the work. Then, the client programmer connects to the server and checks if there are any issues with the server work.\n2. Resource Work\nResource work proceeds independently from data and server work. First, the art team creates the resources that will be included in the game. Then, the UIUX team designs the UI/UX based on these resources and planning documents, and assembles prefabs that can be used in Unity.\n\nThe left is the planning document, and the right is the prefab mockup.\nOnce prefab creation is complete, the effects team creates effects to add visual flair, and the motion team breathes life into the resources created by the art team by adding movement.\nIt is also important to check midway through the work whether each resource is being produced according to the planning intent or design.\n\n3. Client Work\nSince client programmers inevitably complete their work only after all other job roles' work is finished, they are responsible for the last step in the work order. They use the resources, server, and data created previously to make the game actually work. Detailed technical explanations are omitted as this is not a technical writing piece. When completing the work, they must take videos or screenshots to confirm that the resources are being used according to the intentions of the resource creators.\n\nCommunication among client programmers is also very important while working. Cookie Run Kingdom has been in live service for about four and a half years, adding numerous contents, and therefore, the project structure has become increasingly deep and complex. If a certain feature is needed, there's an 80% chance it already exists. If additional features are added without knowledge of existing implementations, code can become redundant, leading to unnecessary refactoring later. Therefore, it is important to look for similar cases first when working.\n\"Does this feature already exist?\"\n\"Has anything similar been worked on before?\"\n\"How should I approach this task?\"\nQuestions like these are exchanged almost daily among client programmers in the field.\nüì¶ Resource Management\nThere's a task to be done at the end of the development work. That is resource management. Before explaining how resource management is done, let me explain that Cookie Run Kingdom uses Unity AssetBundles. AssetBundle is a Unity resource management system that packages game resources separately so they can be loaded when needed.\nAssetBundles - Unity Manual\nIf the app's capacity is large, the initial download takes a long time. Therefore, the app itself is made lightweight, and additional resources are downloaded on the title screen as shown below.\n\nAt this time, resources included in the app are build resources, and resources downloaded additionally from the title screen are AssetBundle resources (bundle resources). For small-scale projects, including resources in the build does not pose a significant problem. However, as the game grows and updates accumulate, build size becomes a serious issue. In such cases, all resources in the build must be moved to bundles. If resources in the build refer to bundle resources, the following issue arises. Resources cannot be loaded properly, appearing as white rectangles.\n\nConversely, if the bundle refers to build resources, the resources in the build are copied into the bundle. Consequently, the bundle's capacity increases due to duplicate resources. In the worst-case scenario, the build might need to be redone, requiring another update. To prevent such issues, client programmers create tools that indicate external resource references, as shown below, to manage resources.\n\n‚Ü©Ô∏è Feedback Meeting\nAfter the deadline, there is a meeting to provide feedback on all the content included in that update. The PD participates in the meeting to provide feedback on whether the implementation is in line with the initially proposed direction and if any further improvements are needed. After this meeting, there is a feedback reflection period of about 3-4 days, and then QA begins in earnest.\nüìù QA & Build Submission\nNow, the QA team's work begins in earnest. The QA team tests based on the planning document review and test cases they conducted while content development was in progress.\nPlanning Document Review (Inspection Writing)\nInspection: Refers to the question-and-answer process to explore and supplement initial problems based on the planning document.\nTest Case (TC) Writing: Based on the planning document reflecting the inspection content, test cases (TCs) are written, organizing the test items.\nTest Execution: Tests are generally conducted in the following order: Unity editor test ‚Üí Actual device build test.\nContent Play and Feedback Submission\nThrough this process, it is confirmed whether the actual implementation functions according to the planning intent, and the completeness of the content is enhanced. In this process, the client programmer corrects the feedback and issues that arise and submits a revised build. After QA, the game build that has passed testing is reviewed and submitted to each app store (Google Play, Apple App Store, etc.).\nü™¶ Post-Management\nSubmission to the app store is not the end. Monitoring follows.\n1. Live Issue Fixes\nThe QA team continuously monitors live services even after the update, identifies the causes of any issues, and fixes them.\n\nThe response method varies depending on the nature of the issue. Issues that can be fixed by modifying resources undergo patching, and issues requiring code modification are either announced as known bugs depending on their severity or updated by rebuilding.\n2. Memory Management\nMemory-related issues still occasionally occur for users with low-spec devices, so continuous monitoring and optimization are necessary. Not all users have high-spec devices, so memory usage must be managed to ensure smooth operation even in low-spec environments. This is because there are limitations on the amount of memory an app can use depending on the device specifications. For example, on some devices like iPhone 8 or XR, the usable memory for an app in execution is limited to about 2GB. If more memory is used than this, iOS will unexpectedly terminate the app for memory protection. To ensure the game runs stably, it is necessary to unload unused resources from memory at certain intervals instead of loading bundle resources indefinitely.\n\nMemory cleanup is performed while displaying loading screens like the one above. Memory is usually cleared just before entering a combat scene, as combat scenes are resource-intensive. By clearing unused resources from memory just before entering, free space is secured.\n3. Refactoring\nIf small technical defects are neglected with the reasoning \"there's no time\" or \"I'll fix it later,\" those problems can snowball and eventually lead to major disruptions affecting the entire team. This is referred to as accumulating Technical Debt. To prevent such technical debt, a habit of performing refactoring consistently is necessary. Even if there are no problems now, as new features are continuously added, the complexity of the code will gradually increase. The more complex the structure, the greater the impact a small modification can have, reaching a point where it becomes difficult to make changes without refactoring. However, refactoring often affects existing operations even without functional changes. Therefore, before refactoring, it is essential to consult with relevant departments and thoroughly share information with QA and PM teams to minimize risks. Additionally, the person performing the refactoring should write test code to ensure that existing functions operate correctly.\n\nWords to Those Who Want to Become Client Programmers\nI would like to introduce the technologies that are good to know as a junior and the attitudes that are considered important in practice to those who dream of becoming game client programmers.\n‚úÖ Technologies Good to Know as a Junior\nIn addition to the technologies a junior should know, I have compiled technologies that are helpful in practice for Unity-based projects:\nData Structures and Algorithms: The absolute basics. As they are frequently covered in interviews, programmers must master them.\nDesign Patterns (Factory, Singleton, State, Observer, etc.): Essential for increasing code maintainability and extensibility in large-scale projects.\nGit: Version control is fundamental for team projects. The ability to understand the concept of branches and manage conflicts and commit history through Git is essential in practice.\nUnity Profiler / Memory Profiler: Key tools for catching GC spikes and memory leaks.\nWhat is Garbage Collection Spike (GC Spike)?\nIn C#, it refers to the phenomenon where game execution temporarily stops when the Garbage Collector, responsible for memory cleanup, runs. This phenomenon becomes noticeable when many large objects are created or deleted, leading to frame drops or stuttering. Minimizing this is crucial in mobile games.\nUniTask Library: Operates much lighter than coroutines or tasks, making it advantageous for reducing GC burden. It is essential for mobile games that frequently perform asynchronous processing.\nDOTween Library: A tween library that helps quickly implement UI animations and effects. It is useful for enhancing the quality of effects and is easy to use.\nFurthermore, there is no better portfolio than the experience of creating a game from start to finish (until release) yourself. Having released a game or having experience developing tools is directly helpful in practice and receives high evaluations from the team.\nüß† Attitudes Valued in Practice\nEqually important as technology is \"the attitude with which one approaches work.\" I have compiled the essential qualities of a client programmer that I have felt in my career:\nPassion and Immersion in Games: People who like games put more affection into the results. Ultimately, this mindset leads to quality and detail.\nA Mindset of Continuous Learning and Receptiveness to Feedback for Improvement: Technology is constantly evolving, so a mindset of continuous learning is necessary. Also, since there are many opportunities for review and feedback, receptiveness for improvement is more important than a defensive attitude.\nPerseverance and Curiosity: In practice, it can take more than a day to find out \"why this problem occurred.\" It requires an attitude of not giving up and digging until the end, even if the results are not immediately apparent.\nCollaboration-Oriented Thinking: Client programmers collaborate with all job roles, including planning, server, art, UIUX, and QA. Efforts to understand the workflows and tasks of other job roles directly lead to smooth development.\nConclusion\nWhat I have felt most strongly in this work is that a client programmer is someone who makes games come alive. And in that process, I have learned that not only technology but also communication, problem-solving, and continuous learning are essential. Anyone who loves games and has a desire to keep learning can do this job. Even if you may be lacking at first, if you learn step by step, your skills will definitely build up, and one day you will be able to confidently say, \"I am a member of the team.\" If you who are reading this are taking that first step, I sincerely support your courage and start, and I hope this article will be of small help on your journey. Thank you for reading.","createdAt":"2025-08-12T09:23:07.506Z","language":"en"}