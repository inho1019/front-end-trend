{"content":"안녕하세요. 쿠키런 킹덤 클라이언트 프로그래머 박지선입니다.\n\n취업준비생 시절 클라이언트 프로그래머의 업무에 대해 명확히 알지 못했습니다. 흔히 눈에 보이는 게임 구현이라고만 생각했지만, 실제 현업에서는 다양한 직군과 협업하고 툴을 개발하며 리소스를 관리하는 등 게임 개발 전반에 걸쳐 폭넓은 역할을 수행합니다.\n\n이 글은 클라이언트 프로그래머를 꿈꾸는 취업준비생들에게 실무 경험을 바탕으로 컨텐츠 개발 흐름을 따라 어떤 일을 하는지 구체적으로 설명하고자 합니다. 회사나 팀에 따라 다를 수 있지만, 하나의 실무 예시로 참고해주시면 좋겠습니다.\n\n게임 회사의 직군 소개\n\n게임 개발팀에는 PD, PM, 서버 프로그래머, 클라이언트 프로그래머, 스토리, 아트, UIUX, 이펙트, 모션, 기획, QA 등 다양한 직군이 협업합니다.\n\nPD는 프로젝트 전체 방향성과 퀄리티를 총괄하고, PM은 개발 관리와 운영, 외부 조직 커뮤니케이션을 담당합니다. 서버 프로그래머는 게임 백엔드와 유저 데이터를 관리하며, 클라이언트 프로그래머는 게임 구조 설계 및 리소스와 데이터를 게임 내에서 구현합니다. 스토리 팀은 게임 전반의 서사를 구성하고, 아트 팀은 컨셉과 리소스를 제작합니다. UIUX 팀은 인터페이스와 사용자 경험을 설계하며 프리팹을 제작하기도 합니다. 프리팹은 Unity에서 재사용 가능한 오브젝트 템플릿입니다. 이펙트 팀은 시각 효과를, 모션 팀은 캐릭터와 오브젝트에 생동감 있는 모션을 부여합니다. 기획 팀은 게임 시스템, 컨텐츠, 밸런스를 설계하고, QA 팀은 기능 테스트와 피드백을 제공합니다.\n\n업데이트와 업무 루틴\n\n쿠키런 킹덤의 '정글전사 쿠키의 베리베리 높이높이!' 미니게임 개발 과정을 예시로 설명하겠습니다.\n\n컨텐츠 결정: PD, 스토리, 아트 팀 중심으로 1년 업데이트 플랜에 맞춰 컨텐츠를 결정합니다. 비스트 에피소드 스토리에서 정글전사 쿠키가 베리를 따는 장면을 모티브로 미니게임 제작이 결정되었습니다.\n\n상위방향성 & 상세기획 회의: PD와 기획팀이 주도하여 컨텐츠 경험 방향성과 미니게임 구성을 논의합니다. 이 단계에서는 클라이언트 프로그래머의 개입이 적지만, 구현 가능성을 확인합니다.\n\n킥오프 회의: 기획팀에서 작성한 킥오프 기획서를 바탕으로 실무자들이 모여 구체적인 스펙을 체크하고 일정을 조율합니다. 클라이언트 프로그래머는 데이터, 서버, 리소스 작업 완료 후 조립하는 것처럼, 미리 설계에 참여하여 리소스 제작 방향성을 제시해야 합니다.\n\n데이터 구조 회의: 게임 데이터 관리를 위해 엑셀 데이터 입력 방식을 논의합니다.\n\n툴 개발: 기획팀의 요청으로 맵 툴을 개발했습니다. 이 툴은 맵 데이터를 랜덤 생성하고, 유니티 에디터에서 시각적으로 확인하며 플랫폼 위치 및 타입을 조정할 수 있게 합니다. 툴 개발은 반복 작업 자동화, 실수 방지, 협업 효율 향상, 밸런싱 용이성 등의 이점을 제공합니다.\n\n작업 시작: 클라이언트 프로그래머는 데이터 & 서버 작업, 리소스 작업 이후에 게임 구현을 시작합니다. 직군별로 독립적인 작업과 연관된 작업이 있으며, 클라이언트 프로그래머는 모든 직군과 소통하며 작업을 조율합니다.\n\n데이터 & 서버 작업: 기획팀의 가데이터 작업 후 서버에서 작업 내용을 반영한 서버를 띄우고, 클라이언트 프로그래머는 서버 접속하여 문제가 없는지 확인합니다.\n\n리소스 작업: 아트팀이 리소스를 제작하면, UIUX 팀이 UI/UX를 설계하고 프리팹을 조립합니다. 이후 이펙트 팀이 시각 효과를, 모션 팀이 움직임을 추가합니다. 중간중간 기획 의도대로 제작되었는지 확인하는 절차도 중요합니다.\n\n클라이언트 작업: 모든 직군의 작업이 완료되면 클라이언트 프로그래머가 게임을 구현합니다. 작업 완료 시 영상이나 캡처로 리소스 제작자의 의도에 맞게 사용되었는지 확인합니다. 같은 클라이언트 프로그래머끼리 유사한 기능이나 작업 방식을 공유하며 소통하는 것이 중요합니다.\n\n리소스 관리: Unity AssetBundle을 사용하여 게임 리소스를 관리합니다. 빌드 크기 문제를 해결하기 위해 AssetBundle로 리소스를 옮기고, 외부 리소스 참조 여부를 알려주는 툴을 제작하여 리소스 관리 이슈를 방지합니다.\n\n피드백 회의: 마감 기간 후 PD가 참여하여 구현 내용을 피드백하고, 3~4일의 피드백 반영 기간 후 QA를 시작합니다.\n\nQA & 빌드 제출: QA팀은 기획서 리뷰와 테스트 케이스를 바탕으로 테스트를 진행하고, 클라이언트 프로그래머는 피드백과 이슈를 수정하여 빌드합니다. 테스트를 마친 빌드는 앱스토어에 제출됩니다.\n\n사후 관리: 업데이트 이후에도 라이브 이슈를 모니터링하고 수정합니다. 리소스 수정은 패치, 코드 수정은 버그 공지 또는 재빌드로 처리합니다. 메모리 관리도 중요하며, 저사양 기기에서도 원활한 플레이를 위해 메모리 사용을 최적화합니다. 로딩 화면 등을 활용하여 메모리를 정리하고, 전투 씬 진입 직전에 불필요한 리소스를 제거합니다.\n\n리팩토링: 기술 부채를 예방하기 위해 꾸준한 리팩토링이 필요합니다. 리팩토링 전에는 반드시 유관 부서와 협의하고, 테스트 코드를 작성하여 기존 기능이 잘 동작하는지 확인해야 합니다.\n\n클라이언트 프로그래머가 되고 싶은 사람에게\n\n신입으로서 알아두면 좋은 기술로는 자료구조와 알고리즘, 디자인 패턴, Git, Unity Profiler/Memory Profiler, UniTask, DOTween 등이 있습니다. 직접 게임을 처음부터 끝까지 만들어본 경험이나 툴 개발 경험은 좋은 포트폴리오가 됩니다.\n\n실무에서 중요한 태도로는 게임에 대한 애정과 몰입, 끊임없이 배우려는 자세와 피드백 수용, 끈기와 탐구심, 협업 중심 사고가 있습니다.\n\n마치며\n\n클라이언트 프로그래머는 게임을 살아 움직이게 만드는 사람입니다. 기술뿐 아니라 소통, 문제 해결, 꾸준한 배움이 필요합니다. 게임을 좋아하고 배우려는 마음이 있다면 누구나 이 일을 할 수 있습니다. 처음에는 부족할 수 있지만, 꾸준히 익혀나가면 실력이 쌓이고 자신 있게 팀의 일원으로 인정받을 수 있습니다. 여러분의 첫걸음을 응원하며, 이 글이 여러분의 여정에 작은 도움이 되기를 바랍니다. 읽어주셔서 감사합니다.","createdAt":"2025-08-12T09:04:28.604Z","language":"ko"}