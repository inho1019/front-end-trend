{"content":"<h1>쏘카 웹 프론트엔드 모노레포 도입기: 생산성 향상을 위한 여정</h1>\n\n<h2>시작하며</h2>\n<p>본 글은 모노레포 환경으로 이관하거나 구성하려는 프론트엔드 개발자, 그리고 프로젝트 환경 세팅 자동화를 통해 효율성을 높이고자 하는 개발자들에게 도움이 될 것입니다.</p>\n<p>쏘카 웹 프론트엔드 팀은 29명의 개발자와 수십 개의 프로젝트를 효율적으로 관리하기 위해 모노레포를 도입했습니다. 기존 멀티레포 환경에서 모노레포로 이관하며 겪었던 기술 스택 기준 설정, 프로젝트 일관성 보장 방법, 그리고 프로젝트 세팅 자동화에 대한 고민과 개선 과정을 공유합니다.</p>\n\n<h2>규모가 커지면서 생기는 문제점들</h2>\n<p>66개에 달하는 프론트엔드 Repository를 관리하며 다음과 같은 문제점들이 발생했습니다.</p>\n<ul>\n    <li>여러 단일 Repository에 존재하는 중복 코드</li>\n    <li>공통 라이브러리 변경 후 여러 단일 Repository에 적용하는 과정의 높은 작업 공수</li>\n    <li>서로 다른 개발 환경으로 인한 프로젝트별 높은 러닝 커브</li>\n</ul>\n\n<h3>2.1 계속해서 생겨나는 중복 코드들</h3>\n<p>프로젝트 증가와 함께 비슷한 기능을 구현하는 코드가 각 프로젝트마다 중복 작성되어 코드 파편화가 발생했습니다. 이는 코드 베이스의 일관성을 저해하고 팀 전체의 생산성 저하 및 코드 품질 관리의 어려움으로 이어졌습니다.</p>\n\n<h3>2.2 멀티레포 환경에서의 공통 라이브러리 업데이트</h3>\n<p>NPM Registry를 활용한 공통 라이브러리(SDS, frontend-libraries) 업데이트는 각 단계별 시간 소요와 모든 프로젝트에 동시 적용의 어려움으로 인해 일관성 유지가 힘들었습니다. 이는 공통 라이브러리의 효율적인 관리와 빠른 개선을 어렵게 하여 프로젝트 전체의 개발 속도와 품질에 영향을 미쳤습니다.</p>\n\n<h2>일관성을 위한 모노레포 도입과 고민</h2>\n<p>모노레포 도입을 통해 다음과 같은 이점을 얻고자 했습니다.</p>\n<ul>\n    <li>공통 컴포넌트의 중앙화된 관리</li>\n    <li>코드 재사용성 증가</li>\n    <li>일관된 개발 환경 및 툴링</li>\n    <li>의존성 관리 간소화</li>\n</ul>\n<p>빠른 빌드 속도, 병렬 실행, 원격 캐싱 등 성능적인 이점과 최소한의 설정으로 모노레포 세팅이 가능한 편의성을 고려하여 Turborepo를 기반으로 프로젝트를 구성했습니다. 이를 통해 30명 이상의 개발자가 수십 개의 프로젝트를 동일한 기술 스택과 개발 환경으로 일관성 있게 관리할 수 있게 되었습니다. 다만, 멀티레포 방식에서 변경될 점과 모노레포 프로젝트 관리를 위한 정책 및 도구 추가에 대한 고민이 필요했습니다.</p>\n\n<h2>프로젝트 세팅 비용 단축하기</h2>\n<p>멀티레포에서 모노레포로 이관하며 겪었던 문제들과 이를 해결하기 위한 Code Generator 도입에 대해 설명합니다.</p>\n<p><strong>💡 Code Generator란?</strong>: 특정 규칙 및 템플릿 명세를 기반으로 소스코드를 자동으로 생성하는 도구나 소프트웨어</p>\n\n<h3>4.1 기존 멀티레포 환경에서의 프로젝트 세팅</h3>\n<p>쏘카 웹 프론트엔드 프로젝트는 Github Repository Template 기능을 활용하여 프로젝트 환경을 관리했습니다. 이 방식은 멀티레포 환경에서 효율적인 프로젝트 세팅과 프로젝트 간 일관성 유지에 도움을 주었으나, 모노레포 환경에서는 더 이상 활용할 수 없었습니다.</p>\n\n<h3>4.2 모노레포 환경 구성 세팅하기</h3>\n<p>모노레포에서는 단일 Repository로 프로젝트를 관리하므로, 새로운 스캐폴딩 방식인 Code Generator를 도입했습니다. 쏘카 프론트엔드 모노레포에서는 Turborepo 기반으로 다음과 같은 주요 패키지들의 자동 생성을 지원합니다.</p>\n<ul>\n    <li><strong>App</strong>: Next.js 기반 프로젝트 세팅, CI/CD Workflow, 테스트 환경, 코어 라이브러리 템플릿 제공</li>\n    <li><strong>socar-design-system</strong>: 디자인 시스템 컴포넌트 코드 컨벤션 및 스타일 파일 제공</li>\n    <li><strong>utils/hooks</strong>: 공통 유틸 함수 패키지 구성, 주석 및 코드 컨벤션 제공, React 환경에서 유용한 공통 로직 포함</li>\n</ul>\n\n<h3>4.3 Code Generator를 활용한 프로젝트 세팅</h3>\n<p>쏘카 모노레포 환경은 Turborepo의 제너레이팅 라이브러리인 turbo/gen을 활용하며, 이는 JavaScript 기반의 프롬프트 라이브러리인 plop을 사용합니다. 이를 통해 새로운 컨트롤러나 구성 요소 변경 시에도 손쉽게 유지 보수 가능한 스크립트 작성이 가능합니다.</p>\n<p>Plop Config는 역할에 맞게 파일을 생성하여 관리하며, add, modify와 같은 예약어 외에도 커스텀 헬퍼 함수와 액션을 추가하여 생성되는 파일에 ESLint의 fix 옵션을 적용하는 프로세스를 설정했습니다. 이를 통해 사용자는 CLI를 통해 빠르고 정확하게 프로젝트 세팅을 완료할 수 있습니다.</p>\n\n<h3>4.4 결론</h3>\n<p>Code Generator 도입을 통해 다음과 같은 이점을 얻었습니다.</p>\n<ul>\n    <li><strong>코드 일관성 유지</strong>: 모든 컴포넌트 및 유틸리티가 동일한 구조와 스타일로 생성되어 코드 베이스 전체의 일관성 유지</li>\n    <li><strong>시간 절약</strong>: 반복적인 보일러 플레이트 코드 작성을 자동화하여 개발자의 시간을 절약. 새로운 프로젝트 생성/세팅 시간 80% 이상 감소</li>\n    <li><strong>오류 감소</strong>: 수동 파일 생성 및 설정 과정에서 발생할 수 있는 인적 오류 감소</li>\n    <li><strong>쉬운 온보딩</strong>: 새로운 팀원이 프로젝트 구조와 컨벤션을 빠르게 이해하고 적용</li>\n</ul>\n<p>이러한 개선은 개발자 생산성 향상과 코드 품질 개선으로 이어져 더 나은 제품을 더 빠르게 제공하는 데 기여했습니다.</p>\n\n<h2>마치며</h2>\n<p>모노레포 도입 이전부터 프로젝트 구성에 대한 기초 지식이 필요했습니다. 이러한 진입 장벽을 낮추고 개발자들의 부담을 줄이기 위해 Code Generator와 같은 도구를 도입했습니다. 개발 팀 성장과 프로젝트 규모 확대에 따라 이러한 개선 노력은 큰 효과를 발휘했으며, 개발자들이 복잡한 환경 설정보다 실제 서비스 로직에 집중할 수 있는 환경을 조성했습니다.</p>\n<p>Common Resource 팀은 개발자 생산성 향상을 위한 방법을 끊임없이 모색하고 있으며, 코드 작성 효율성 증대뿐만 아니라 마치 한 사람이 개발한 것처럼 일관된 코드베이스를 유지하기 위한 다양한 거버넌스 수립과 개발자 일상 작업을 돕는 도구 개발에 힘쓰고 있습니다.</p>\n<p>이 글이 여러분의 개발 프로세스 개선에 도움이 되었기를 바라며, 다음 편에서는 쏘카 프론트엔드 모노레포 - Part2. 코어라이브러리 버전 관리 시리즈로 이어집니다.</p>","createdAt":"2025-08-12T15:58:08.220Z","language":"ko"}