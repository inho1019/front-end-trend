{"content":"<body>\n  <h1>쏘카 웹 프론트엔드 모노레포 도입기</h1>\n  <p>\n    쏘카 웹 프론트엔드는 29명의 프론트엔드 개발자와 수십 개의 프로젝트를 효율적으로 관리하기 위해 모노레포를 도입했습니다.\n    기존 멀티레포 환경에서 겪었던 중복 코드, 공통 라이브러리 업데이트의 어려움, 일관성 없는 개발 환경 등의 문제점을 해결하기 위함이었습니다.\n  </p>\n\n  <h2>2. 규모가 커지면서 생기는 문제점들</h2>\n  <ul>\n    <li>66개의 프론트엔드 Repository에서 발생하는 중복 코드 및 코드 파편화</li>\n    <li>공통 라이브러리 업데이트 시 여러 Repository에 적용하는 과정의 높은 작업 공수</li>\n    <li>일관성 없는 개발 환경으로 인한 프로젝트별 높은 러닝 커브</li>\n  </ul>\n\n  <h2>3. 일관성을 위한 모노레포 도입과 고민</h2>\n  <p>\n    모노레포 도입을 통해 다음과 같은 이점을 얻고자 했습니다.\n  </p>\n  <ul>\n    <li>공통 컴포넌트의 중앙화된 관리</li>\n    <li>코드 재사용성 증가</li>\n    <li>일관된 개발 환경 및 툴링</li>\n    <li>의존성 관리 간소화</li>\n  </ul>\n  <p>\n    빠른 빌드 속도, 병렬 실행, 원격 캐싱 등의 성능 이점과 설정 편의성을 고려하여 Turborepo를 기반으로 모노레포 프로젝트를 구성했습니다.\n  </p>\n\n  <h2>4. 프로젝트 세팅 비용 단축하기</h2>\n  <p>\n    멀티레포 환경에서 모노레포로 이관하면서 기존 Github Repository Template 기능을 활용할 수 없게 되었습니다.\n    이를 대체하기 위해 Code Generator를 구현하여 프로젝트 세팅 비용을 단축했습니다.\n  </p>\n  <h3>4.1 기존 멀티레포 환경에서의 프로젝트 세팅</h3>\n  <p>\n    Github Repository Template 기능과 스캐폴딩(Scaffolding) 방식을 활용하여 프로젝트 세팅의 효율성과 일관성을 유지했습니다.\n  </p>\n  <h3>4.2 모노레포 환경 구성 세팅하기</h3>\n  <p>\n    Turborepo 기반 모노레포 환경에서는 Code Generator를 도입하여 다음과 같은 주요 패키지들의 자동 생성을 지원합니다.\n  </p>\n  <ul>\n    <li>App: Next.js 기반 프로젝트, Terraform, CI/CD Workflow, 테스트 환경, 코어 라이브러리</li>\n    <li>socar-design-system: 디자인 시스템 컴포넌트 코드, 컨벤션, 스타일 파일</li>\n    <li>utils/hooks: 공통 유틸 함수 패키지, 주석 및 코드 컨벤션, React Hooks</li>\n  </ul>\n  <h3>4.3 Code Generator를 활용한 프로젝트 세팅</h3>\n  <p>\n    Turborepo의 제너레이팅 라이브러리 `turbo/gen`과 JavaScript 프롬프트 라이브러리 `plop`을 활용하여 Code Generator를 구현했습니다.\n    Plop Config를 통해 역할에 맞는 파일 생성을 정의하고, 커스텀 헬퍼 함수와 액션을 추가하여 ESLint의 fix 옵션 적용까지 자동화했습니다.\n  </p>\n  <h3>4.4 결론</h3>\n  <p>\n    Code Generator 도입을 통해 다음과 같은 이점을 얻었습니다.\n  </p>\n  <ul>\n    <li>코드 일관성 유지</li>\n    <li>시간 절약 (프로젝트 생성/세팅 시간 80% 이상 감소)</li>\n    <li>오류 감소 (인적 오류 최소화)</li>\n    <li>쉬운 온보딩</li>\n  </ul>\n  <p>\n    이를 통해 개발자 생산성 향상, 코드 품질 개선, 더 나은 제품을 더 빠르게 제공할 수 있게 되었습니다.\n  </p>\n\n  <h2>5. 마치며</h2>\n  <p>\n    모노레포 도입과 Code Generator 구현을 통해 개발자들이 복잡한 환경 설정보다는 실제 서비스 로직에 집중할 수 있는 환경을 조성했습니다.\n    Common Resource 팀은 개발자 생산성 향상과 일관된 코드베이스 유지를 위해 지속적으로 노력하고 있으며, 다음 편에서는 코어 라이브러리 버전 관리에 대한 내용을 공유할 예정입니다.\n  </p>\n</body>\n","createdAt":"2025-08-20T05:41:13.746Z","language":"ko"}