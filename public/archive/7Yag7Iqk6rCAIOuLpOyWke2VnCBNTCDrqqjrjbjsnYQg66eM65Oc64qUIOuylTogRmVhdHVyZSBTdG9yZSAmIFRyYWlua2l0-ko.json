{"content":"<body>\n    <h2>토스의 ML Platform: Feature Store와 Trainkit을 활용한 모델 학습 파이프라인 자동화</h2>\n    <p>토스 ML Platform 팀은 다양한 ML 서비스의 효율적이고 안정적인 운영을 위해 Feature Store와 Trainkit을 자체 개발하여 사용하고 있습니다. 이 글에서는 두 도구의 역할과 ML 실무에서 발생하는 문제점들을 어떻게 해결하는지 공유합니다.</p>\n\n    <h3>Feature Store 란?</h3>\n    <ul>\n        <li>MLOps 아키텍처에서 데이터 품질과 일관성을 보장하는 핵심 시스템입니다.</li>\n        <li>학습과 서빙 간 불일치(Training-Serving skew)를 방지합니다.</li>\n        <li>Feature의 재사용성을 높여 중복 구현과 협업 효율을 증대시킵니다.</li>\n        <li>실시간/배치 Feature 모두 지원하며, Feature 수준의 메타데이터, 품질 모니터링, 권한 관리 기능을 제공합니다.</li>\n    </ul>\n\n    <h3>토스에 Feature Store가 필요한 이유</h3>\n    <ul>\n        <li>수십 개의 ML 모델 운영, 각기 다른 팀, 데이터 소스, 서빙 요구사항을 일관되게 관리하기 위함입니다.</li>\n        <li>모델 개발 및 서빙 속도를 향상시키고, Feature 재사용성을 높여 작업 효율을 극대화합니다.</li>\n        <li>Feature 품질 문제를 조기에 감지하고, 데이터 접근 및 권한 관리를 강화합니다.</li>\n    </ul>\n\n    <h3>직접 개발한 이유</h3>\n    <ul>\n        <li>서비스 환경에 최적화된 ML 인프라 구축을 위해 자체 개발을 선택했습니다.</li>\n        <li>오픈소스(Feast 등)의 개념과 구조를 참고하였으나, 복잡한 사내 니즈를 충족하는 오픈소스 부재 및 자체 개발 시 최소한의 개발로 최적화 가능성을 고려했습니다.</li>\n    </ul>\n\n    <h3>Feature Store System Architecture</h3>\n    <ul>\n        <li>사용자는 Admin Dashboard와 SDK를 통해 Feature를 등록합니다.</li>\n        <li>학습용 데이터는 Offline Storage에, 실시간 Feature 서빙은 Online Storage(Aerospike 클러스터 사용)를 통해 제공됩니다.</li>\n        <li>ML 모델 학습에는 Trainkit이 활용되며, Trainkit은 Feature Store의 메타 정보를 활용합니다.</li>\n    </ul>\n\n    <h3>Data Model</h3>\n    <ul>\n        <li>Feast의 Data Model을 참고하여 Feature Table, Feature Service 등으로 구조화했습니다.</li>\n        <li><strong>Entity</strong>: 학습 데이터에서 예시를 구분하는 키 (테이블 내 유니크).</li>\n        <li><strong>Feature</strong>: 데이터를 관리하는 단위 (테이블 컬럼).</li>\n        <li><strong>Feature Table</strong>: 물리적인 데이터 테이블을 Wrapping한 개념 (Entity, Features, Partition Column 등으로 구성).</li>\n        <li><strong>Feature Service</strong>: ML 모델 학습 및 Inference에 사용되는 논리적 단위 (Feature Table의 리스트, Entity로 정의).</li>\n    </ul>\n\n    <h3>Feature Store Admin</h3>\n    <ul>\n        <li>보안 정책, 컴플라이언스 이슈 및 사내 요구사항을 반영하여 자체 개발되었습니다.</li>\n        <li>사내 Data Center와 연동하여 Feature Table을 등록하고, 컬럼을 Entity, Feature, Partition으로 구조화합니다.</li>\n    </ul>\n\n    <h3>Trainkit</h3>\n    <p>모델 학습 파이프라인의 비핵심 레이어(데이터 로딩, 전처리 등) 표준화를 통해 중복 코드, 재현성 저하, 기술 부채 등의 문제를 해결하는 도구입니다.</p>\n\n    <h3>Trainkit 구조</h3>\n    <ul>\n        <li><strong>Data Module</strong>: PyTorch Lightning의 LightningDataModule을 상속받아 데이터 로딩, 전처리, 배치 생성을 담당합니다.</li>\n        <li><strong>Target</strong>: 여러 Feature를 조인할 때 기준이 되는 데이터 스펙을 정의합니다.</li>\n        <li><strong>Feature Service</strong>: Feature Store API와 연동되어 Feature 메타 정보를 조회하고, Target 데이터와 Feature를 병합하는 Join SQL을 생성합니다.</li>\n        <li><strong>Feature Processor</strong>: 각 Feature에 대한 전처리 로직(Casting, Imputation, Scaling, Encoding)을 수행합니다.</li>\n        <li><strong>Feature Package</strong>: Feature Service와 Feature Processor를 포함하는 Facade Layer로, 캐싱, Feature 유효성 검사 등을 담당합니다.</li>\n    </ul>\n\n    <h3>Trainkit이 해결하는 3가지 핵심 과제</h3>\n    <ol>\n        <li>\n            <strong>멀티 Feature Package 조인</strong>: Target을 기준으로 무한한 Feature Package를 결합하여 복잡한 Feature를 간결하고 효율적으로 결합할 수 있습니다.\n        </li>\n        <li>\n            <strong>Train-Serving Skew 해소</strong>: Target 데이터의 시간 파티션을 Shift 시켜 데이터 누수를 방지하고, 학습-서빙 간 Feature 값 불일치 문제를 해결합니다.\n        </li>\n        <li>\n            <strong>PIT (Point-In-Time) 조인</strong>: 런타임에 조인을 실행하여 적은 메모리로 정확한 Feature 값을 찾아 온라인/오프라인 데이터 일관성을 유지합니다.</li>\n    </ol>\n    <p>토스 ML Platform 팀은 Feature Store와 Trainkit을 통해 데이터 준비부터 학습, 서빙, 배포, 모니터링까지 End-to-End 파이프라인을 플랫폼화하며 지속적으로 발전하고 있습니다.</p>\n</body>","createdAt":"2025-08-14T10:01:29.978Z","language":"ko"}