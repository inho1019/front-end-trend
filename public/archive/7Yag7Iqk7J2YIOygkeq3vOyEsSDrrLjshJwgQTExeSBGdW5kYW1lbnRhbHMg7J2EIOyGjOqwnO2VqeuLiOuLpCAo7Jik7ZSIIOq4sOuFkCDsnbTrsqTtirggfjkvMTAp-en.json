{"content":"<body>\n<h1>A11y Fundamentals Explained</h1>\n<p>A11y Fundamentals is a resource developed by Toss to promote accessibility in web development. Toss believes in making finance easy for everyone and prioritizes accessibility in their products and documentation. Accessibility (A11y) is a fundamental principle that helps all users interact with the web more easily and conveniently.</p>\n<p>This document addresses common challenges developers face when implementing accessibility, offering practical solutions and core concepts. It explains why certain practices, like nesting buttons within buttons or incorrectly using the <code>&lt;a&gt;</code> tag, are problematic and demonstrates how screen reader users perceive content.</p>\n<h2>Why Accessibility Matters</h2>\n<p>Accessibility benefits everyone, including people with disabilities, non-disabled users, and developers.</p>\n<h3>For Users with Disabilities</h3>\n<p>Users who cannot see visual information, such as button colors, icon shapes, layouts, charts, or images, rely on assistive technologies like screen readers. Proper accessibility attributes like <code>role</code>, <code>label</code>, and <code>alt</code> text are crucial for them to access information and interact with elements like buttons and links. For example, an element with only a click event attached without proper ARIA roles will not be recognized as a button by screen readers, hindering usability.</p>\n<h3>For General Users</h3>\n<p>Following accessibility guidelines also enhances the web experience for users without disabilities. Standard web behaviors are naturally provided.</p>\n<ul>\n  <li>Using <code>&lt;a&gt;</code> tags correctly enables expected browser functionalities like \"Open in new window\" via the right-click context menu. Using generic elements like <code>&lt;div&gt;</code> or <code>&lt;button&gt;</code> with only click events attached disables these standard features.</li>\n  <li>Proper use of form elements like <code>&lt;form&gt;</code>, <code>&lt;label&gt;</code>, and input types allows users to submit forms by pressing the Enter key, a familiar action.</li>\n  <li>Keyboard-centric users navigate using keys like Tab, Shift+Tab, Enter, Space, and arrow keys. Without correct roles and focus management on interactive elements, these users cannot operate the website effectively.</li>\n</ul>\n<p>Accessibility ensures that all users, including those who primarily use a keyboard and those expecting a standard web experience, can navigate without frustration. Neglecting accessibility can lead to inconveniences that anyone might encounter.</p>\n<h2>Developer Benefits of Accessibility</h2>\n<p>Implementing accessibility makes UI testing significantly easier. Libraries like <code>testing-library</code> recommend using the <code>ByRole</code> query, which allows developers to easily select elements with clearly defined roles (e.g., buttons, input fields, links).</p>\n<p>For instance, one can easily select a button with the name \"Save\" and the role \"button\". Even with multiple elements sharing the same name, accessibility labels of parent elements help differentiate and select them easily. In contrast, using <code>querySelector</code> makes tests brittle, easily breaking if the markup structure changes. While <code>ByTestId</code> requires adding a separate attribute for testing, potentially leaving it in the service code, <code>ByRole</code> allows testing from the user's perspective and easily targeting unique roles, which is only possible with well-structured, accessible markup.</p>\n<p>In essence, accessibility serves all users and helps developers create more robust and maintainable code.</p>\n<h2>Key Principles</h2>\n<p>To improve web content accessibility, four key principles and specific methods are suggested:</p>\n<ol>\n  <li><strong>Structure Clearly</strong>\n    <ul>\n      <li>Do not nest buttons within buttons.</li>\n      <li>Do not attach <code>onClick</code> directly to table rows.</li>\n    </ul>\n  </li>\n  <li><strong>Convey Meaning Accurately</strong>\n    <ul>\n      <li>Give interactive elements a name.</li>\n      <li>Add descriptions to elements with the same name.</li>\n    </ul>\n  </li>\n  <li><strong>Create Predictable Interactions</strong>\n    <ul>\n      <li>Ensure button roles and actions are consistent.</li>\n      <li>Wrap input elements with <code>&lt;label&gt;</code>.</li>\n    </ul>\n  </li>\n  <li><strong>Supplement Visual Information</strong>\n    <ul>\n      <li>Provide appropriate alternative text for images and icons.</li>\n    </ul>\n  </li>\n</ol>\n<h2>Toss Remittance Screen Reader Experience Event</h2>\n<p>To celebrate the release of the A11y Fundamentals document, Toss is hosting a special event. Experience sending remittances using only sound in a screen reader environment!</p>\n<h3>How to Participate:</h3>\n<ol>\n  <li>Use the remittance service in a screen reader environment via the [Experience Page].</li>\n  <li>Leave a comment with a screenshot of your completed experience on the GitHub page.</li>\n  <li>A gift will be given to a randomly selected participant.</li>\n</ol>\n<p>Winners will be contacted via email registered on GitHub by September 10th. Please verify the legitimacy of any messages, as the event will never ask for card registration or payment information. Event emails are for notification purposes only and are not stored separately.</p>\n<p>Directly experiencing the screen reader environment can deepen your understanding of why accessibility is important. We hope this event serves as a small catalyst for that.</p>\n</body>","createdAt":"2025-08-13T09:45:34.833Z","language":"en"}