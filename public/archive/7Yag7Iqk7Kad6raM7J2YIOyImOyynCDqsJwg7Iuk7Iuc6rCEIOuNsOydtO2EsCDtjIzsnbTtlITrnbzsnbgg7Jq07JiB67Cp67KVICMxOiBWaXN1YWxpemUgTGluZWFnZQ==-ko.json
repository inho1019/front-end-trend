{"content":"<body>\n  <h2>토스증권 대규모 실시간 데이터 파이프라인 운영 경험 (1부: 리니지 시각화)</h2>\n  <p>\n    토스증권은 수천 개의 실시간 데이터 파이프라인을 운영하며, 이를 효율적으로 관리하기 위해 '리니지 시각화' 서비스를 개발했습니다.\n  </p>\n\n  <h3>1. 실시간 데이터 파이프라인의 필요성</h3>\n  <ul>\n    <li>서비스 성장으로 인한 데이터 증가 및 OLTP DB 부하 문제 해결</li>\n    <li>사용자의 빠른 응답 요구에 대한 대응 (실시간 시황 반영 등)</li>\n    <li>CQRS 아키텍처 적용 시 OLTP -> OLAP 데이터 실시간 이동 역할</li>\n  </ul>\n\n  <h3>2. 성공적인 운영을 위한 핵심 요소</h3>\n  <ul>\n    <li>SLA 충족 및 모니터링 (최소 Latency, 무중단 운영, 유실/중복 최소화)</li>\n    <li>확장성을 고려한 클러스터 설계</li>\n    <li>파이프라인 시각화 (운영 편의성 증대, 팀 간 커뮤니케이션 비용 절감)</li>\n  </ul>\n\n  <h3>3. 리니지 시각화 서비스 개발</h3>\n  <h4>3.1. 리니지(Lineage)란?</h4>\n  <ul>\n    <li>데이터 파이프라인 내 Job 간의 순서와 관계를 나타내는 것</li>\n    <li>DAG (Directed Acyclic Graph) 자료구조를 활용하여 시각화</li>\n  </ul>\n  <h4>3.2. 구현 방식</h4>\n  <ul>\n    <li>모든 실시간 데이터 파이프라인 Job 정보를 DAG 형태로 MongoDB에 저장</li>\n    <li>MongoDB graphSearch 쿼리를 활용하여 그래프 탐색 및 시각화</li>\n    <li>원천 데이터 생성 주체, 실시간 데이터 프로세싱 엔진, 데이터 저장소 등 시스템 정보 메타데이터화</li>\n  </ul>\n  <h4>3.3. 실제 활용 사례</h4>\n  <ul>\n    <li><strong>시세 데이터 흐름 시각화:</strong> Spring 서비스 서버 -> Kafka -> Hadoop, ClickHouse, Kudu 등</li>\n    <li><strong>커뮤니티 서비스 테이블 시각화:</strong> MySQL CDC -> Kafka -> ClickHouse -> ClickHouse MView -> 최종 테이블</li>\n    <li><strong>MSA Kafka 토픽 시각화:</strong> 서비스 서버 발행 -> 양방향 미러링 -> Consumer 소비</li>\n    <li>Node 또는 Edge 클릭 시 Job 생성 로직 등 상세 정보 제공 (JSON 형태 메타데이터 활용)</li>\n  </ul>\n\n  <h3>4. 앞으로의 방향</h3>\n  <ul>\n    <li><strong>구간별 메트릭 연동:</strong> Latency, 초당 전송량 등 메트릭 정보를 리니지 그래프에 표현</li>\n    <li><strong>메타데이터 관리 서비스 고도화:</strong> SLA 목표 및 충족 여부, 담당자, 영향 받는 사람 명시, 상세 로직 및 데이터 적재 방식 정보 제공</li>\n    <li><strong>DBT 연동:</strong> 실시간 데이터 파이프라인과 배치 데이터 파이프라인을 연결하여 End-to-End 리니지 구축</li>\n  </ul>\n  <p>\n    리니지 시각화 서비스 오픈 후 수천 개의 파이프라인 운영 효율이 증대되고, 팀 간 커뮤니케이션 비용이 감소하는 효과를 얻었습니다. SLA 충족 및 모니터링, 확장성 고려 클러스터 설계에 대한 내용은 2부, 3부에서 이어집니다.\n  </p>\n</body>","createdAt":"2025-08-12T17:35:31.511Z","language":"ko"}