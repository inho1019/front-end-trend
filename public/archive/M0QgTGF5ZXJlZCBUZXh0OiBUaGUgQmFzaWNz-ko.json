{"title":"3D Layered Text: The Basics","content":"<body>\n<p>클라이언트의 요청으로 3D 볼록 텍스트 효과를 만들었습니다. 이 효과는 여러 CSS 애니메이션 기법을 배우기에 좋은 프로젝트입니다. 이번 글은 3부작 시리즈 중 첫 번째로, HTML과 CSS를 사용하여 3D 레이어드 텍스트 효과의 핵심 기법을 만드는 데 중점을 둡니다. 구조, 쌓기, 인덱싱, 원근법, 그리고 시각적으로 통합하는 방법을 다룹니다.</p>\n<ul>\n<li>2부에서는 애니메이션, 전환, 레이어에 생동감을 불어넣는 시각적 변형을 추가할 것입니다.</li>\n<li>3부에서는 마우스 위치를 따라가는 JavaScript를 도입하여 완전히 인터랙티브한 버전을 구축합니다.</li>\n</ul>\n<h2>3D 레이어드 텍스트 아티클 시리즈</h2>\n<ul>\n<li>기본 (현재 위치!)</li>\n<li>모션 및 변형</li>\n<li>상호 작용 및 동적 (8월 22일 예정)</li>\n</ul>\n<h2>방법</h2>\n<p>CSS는 3차원 효과를 생성할 수 있지만, 깊이를 직접적으로 제공하지는 않습니다. 3D 구조를 만들기 위해서는 구성 또는 레이어 방식이라는 두 가지 주요 접근 방식이 있습니다.</p>\n<h3>구성</h3>\n<p>구성 방식은 평평한 요소들을 조합하여 3D 객체를 만듭니다. 각 면이 별도의 요소로, 정밀하게 위치하고 회전됩니다.</p>\n<h3>레이어</h3>\n<p>레이어 방식은 여러 겹의 레이어를 쌓고, 위치와 색상의 미묘한 변화를 사용하여 깊이감을 연출합니다. 눈을 속여 볼록하거나 입체적인 효과를 만듭니다.</p>\n<h3>접근성 참고 사항</h3>\n<p>텍스트에 이 기법을 적용할 때, 추가 및 장식용 레이어를 <code>aria-hidden=\"true\"</code>로 감싸서 스크린 리더 사용자를 위한 접근성을 확보하십시오.</p>\n<h2>3D 레이어드 텍스트 만들기</h2>\n<h3>HTML 구조</h3>\n<p>기본적인 컨테이너 요소(.text)를 만들고, 원래 텍스트를 담을 span과 레이어를 추가할 div(.layers)를 넣습니다.</p>\n<pre><code>\n  Lorem ipsum\n  \n</code></pre>\n<h3>레이어 인덱싱</h3>\n<p>각 레이어에 `--i` 변수를 할당하여 인덱스를 지정합니다. 이는 레이어의 위치와 모양을 계산하는 데 사용됩니다.</p>\n<pre><code>\n.layer {\n  &:nth-child(1): { --i: 1; }\n  &:nth-child(2): { --i: 2; }\n  &:nth-child(3): { --i: 3; }\n  /* ... 더 많은 레이어 */\n}\n</code></pre>\n<p>또는 인라인 스타일을 사용할 수 있습니다.</p>\n<pre><code>\n  \n  \n  \n  \n</code></pre>\n<h3>내용 추가</h3>\n<p>각 레이어에 텍스트를 추가합니다. pseudo 요소를 사용하거나, 각 레이어 안에 직접 텍스트를 넣을 수 있습니다. 이 예제에서는 Emmet을 사용하여 모든 레이어에 \"Lorem ipsum\"을 추가합니다.</p>\n<pre><code>\n.layer {\n  --text: \"Lorem ipsum\";\n  \n  &::before {\n    content: var(--text);\n  }\n}\n</code></pre>\n<p>또는 직접 텍스트를 포함시킵니다.</p>\n<pre><code>\n  Lorem ipsum\n  \n    Lorem ipsum\n    Lorem ipsum\n    Lorem ipsum\n    \n  \n</code></pre>\n<h3>위치 지정</h3>\n<p>모든 레이어가 같은 위치에 쌓이도록 <code>position: absolute</code>와 <code>inset: 0</code>을 사용합니다. 컨테이너에는 <code>position: relative</code>를 적용합니다.</p>\n<pre><code>\n.text {\n  position: relative;\n\n  .layers, .layer {\n    position: absolute;\n    inset: 0;\n  }\n}\n</code></pre>\n<h3>깊이 추가</h3>\n<p><code>perspective</code>를 부모 요소(.scene)에 적용하고, 자식 요소에는 <code>transform-style: preserve-3d</code>를 적용하여 z축 이동을 보이게 합니다.</p>\n<pre><code>\n.scene {\n  perspective: 400px;\n  \n  * {\n    transform-style: preserve-3d;\n  }\n}\n</code></pre>\n<h3>레이어 분리</h3>\n<p>레이어의 인덱스(`--i`)와 레이어 간 간격(`--layer-offset`)을 사용하여 각 레이어를 z축으로 이동시킵니다.</p>\n<pre><code>\n.text {\n  --layers-count: 24;\n  --layer-offset: 1px;\n}\n\n.layer {  \n  transform: translateZ(calc(var(--i) * var(--layer-offset)));\n}\n</code></pre>\n<h3>그림자 만들기</h3>\n<p>인덱스 값을 정규화하여(`--n: calc(var(--i) / var(--layers-count))`) 각 레이어의 색상 밝기를 조정합니다. HSL 색상 함수를 사용하여 깊이감을 더합니다.</p>\n<pre><code>\n.layer {\n  --n: calc(var(--i) / var(--layers-count));\n  color: hsl(200 30% calc(var(--n) * 100%));\n}\n</code></pre>\n<p>원래 텍스트(span)는 더 어둡게 설정하여 강조합니다.</p>\n<pre><code>\nspan {\n  color: black;\n  text-shadow: 0 0 0.1em #003;\n}\n</code></pre>\n<h3>마무리</h3>\n<p>글꼴을 변경하고(예: Montserrat), <code>rotateX</code>를 사용하여 텍스트에 약간의 각도를 줍니다.</p>\n<pre><code>\n.text {\n  font-family: Montserrat, sans-serif;\n  font-weight: 900;\n  transform: rotateX(30deg);\n}\n</code></pre>\n<p>이 단계까지 레이어, 인덱스, 내용, 원근법, 위치 지정, 조명 등을 결합하여 3차원 텍스트 효과를 완성했습니다.</p>\n<h2>마무리</h2>\n<p>HTML과 CSS만으로 견고한 3D 텍스트 효과를 만들었습니다. 다음 장에서는 이 효과에 움직임을 추가하고, 전환을 도입하며, 창의적인 변형을 탐구하여 더욱 생동감 있게 만들 것입니다.</p>\n</body>","createdAt":"2025-08-18T13:46:00.000+00:00","link":"https://css-tricks.com/3d-layered-text-the-basics/","language":"ko"}