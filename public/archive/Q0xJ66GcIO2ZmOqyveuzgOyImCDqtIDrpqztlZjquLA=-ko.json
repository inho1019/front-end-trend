{"content":"<body>\ncommon resource 팀은 개발자들의 일상 작업을 돕는 도구를 개발하며, 프로젝트가 늘어나면서 환경 변수 관리의 불편함을 겪었습니다.\n\n기존에는 AWS Amplify environment, GitHub secrets 등 다양한 도구를 사용했으나, GitHub secrets는 값 확인 및 수정이 어렵고, 환경 변수가 파편화되어 문서화 및 관리에 비효율이 발생했습니다.\n\n이러한 문제 해결을 위해 AWS Secrets Manager로 환경 변수 관리 도구를 통일했습니다.\n하지만 새로운 프로젝트 진행 시, 필요할 때마다 수동으로 환경 변수를 추가하고 팀원들에게 알린 후, 팀원들이 값을 복사하여 .env 파일 형식으로 붙여넣는 과정에서 휴먼 에러 및 시간 소요가 발생했습니다.\n\n이를 자동화하기 위해 쉘 스크립트를 작성하여 AWS Secrets Manager 값을 .env 파일 형식으로 변환했습니다.\n하지만 이 방식은 각 레포지토리에 스크립트를 복사하고 package.json에 명령어를 추가해야 하는 번거로움이 있었으며, 쉘 스크립트의 낮은 친숙도로 인해 유지 보수가 어려웠습니다.\n\n이후 쉘 스크립트의 러닝 커브와 레포지토리 내 파일 중복 문제를 해결하고자 CLI 도구 개발을 결정했습니다.\n쉘 스크립트를 JavaScript 코드로 변경하고, 원격 저장소에 코드를 올려 Node.js 환경에서 실행하며, Commander와 Prompts 라이브러리를 활용하여 친숙한 인터페이스로 환경 변수를 관리하는 CLI를 구현했습니다.\n\nCLI를 통해 단 한 줄의 명령어로 환경 변수 파일을 쉽게 생성할 수 있게 되었으며, 문제의 근본 원인을 파악하고 주변 라이브러리를 탐색하는 과정에서 많은 것을 배웠습니다.\n이 경험을 통해 귀찮은 일들을 해결하기 위해 고민하는 분들에게 도움이 되고자 이 글을 작성했습니다.\n</body>","createdAt":"2025-08-12T16:26:13.050Z","language":"ko"}