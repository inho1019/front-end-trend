{"title":"Composition in CSS","content":"<body>\n  <ul>\n    <li>Tailwind와 같은 유틸리티 라이브러리는 컴포지션을 강조하지만, 저자는 이를 순진하다고 평가합니다.</li>\n    <li>유틸리티 컴포지션은 요소를 하나씩 CSS 값을 추가하는 것과 같습니다.</li>\n    <li>이것은 직접 CSS 클래스에 스타일을 추가하는 것과 본질적으로 다르지 않습니다.</li>\n    <li>CSS는 원래부터 캐스케이드 특성 덕분에 컴포지션이 가능한 언어입니다.</li>\n    <li>개발자들은 CSS 컴포지션을 HTML에서 클래스를 추가하는 것으로만 좁게 이해하는 경향이 있습니다.</li>\n    <li>Sass 믹스인이나 고급 Tailwind 유틸리티를 사용하는 CSS 파일 내에서의 컴포지션은 간과됩니다.</li>\n    <li>컴포지션은 '함께 배치하다' 또는 '분리된 부분으로 구성되다'라는 의미에서 파생됩니다.</li>\n    <li>컴포지션은 유틸리티 클래스를 사용할 때 CSS 불필요한 코드를 줄일 수 있지만, HTML 코드 양은 늘어날 수 있습니다.</li>\n    <li>클래스 선택자를 이용한 컴포지션은 CSS 코드를 줄이지는 않지만 HTML 코드를 덜 늘립니다.</li>\n    <li>HTML과 CSS 코드 양의 증가는 웹사이트 성능에 미치는 영향이 미미합니다.</li>\n    <li>이미지 최적화와 같은 다른 요소들이 성능 향상에 더 큰 영향을 미칩니다.</li>\n    <li>코드베이스를 개선하는 데 있어 성능 향상보다 개발자의 코드 인식과 스타일링 용이성에 집중하는 것이 더 중요합니다.</li>\n    <li>HTML과 CSS 코드 양은 크게 중요하지 않으며, 아키텍처, 구조, 명확성에 집중하는 것이 좋습니다.</li>\n    <li>스타일은 레이아웃, 타이포그래피, 테마, 효과의 네 가지 범주로 나눌 수 있으며, 각 범주별로 컴포지션 가능한 클래스를 만들 수 있습니다.</li>\n    <li>이러한 범주별 컴포지션은 레고처럼 조합하여 최종 결과물을 만들 수 있습니다.</li>\n    <li>CSS는 본질적으로 컴포지션 가능하며, 개발자들은 컴포지션의 의미를 좁게 이해합니다.</li>\n    <li>컴포지션은 HTML 또는 CSS 파일 내에서 모두 가능합니다.</li>\n    <li>스타일은 레이아웃, 타이포그래피, 테마, 효과의 네 가지 범주로 나눌 수 있습니다.</li>\n  </ul>\n</body>","createdAt":"2025-09-08T13:55:26.000+00:00","link":"https://css-tricks.com/composition-in-css/","language":"ko"}