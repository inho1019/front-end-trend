{"title":"An Introduction to JavaScript Expressions","content":"<body>\n    <p>이 글은 Mat Marquis와 Andy Bell이 만든 온라인 JavaScript 코스 \"JavaScript for Everyone\"의 일부 발췌본으로, JavaScript 표현식에 관한 내용을 다룹니다. 표현식은 값을 도출하는 코드 조각으로, 2 + 2는 결과로 4를 반환하는 대표적인 예시입니다. 함수 내에서 값이 예상되는 곳이라면 간단하거나 복잡한 표현식이든 어디든 사용할 수 있습니다.</p>\n    <p><strong>주요 표현식</strong></p>\n    <ul>\n        <li>숫자 리터럴(예: 3) 자체도 값을 반환하는 기본 표현식입니다.</li>\n        <li>가독성을 높이거나 연산자 우선순위를 제어하기 위해 괄호를 사용한 그룹화 연산자도 유용하게 사용됩니다.</li>\n        <li>개발자 콘솔에서 객체 리터럴을 직접 사용할 때 구문 오류를 방지하기 위해 그룹화 연산자를 사용할 수 있습니다.</li>\n    </ul>\n    <p><strong>부수 효과가 있는 표현식</strong></p>\n    <ul>\n        <li>할당 표현식(예: <code>theIdentifier = 3</code>)은 값을 할당하면서 해당 값을 반환합니다.</li>\n        <li>함수 호출도 표현식이며, 함수가 반환하는 값으로 평가됩니다. 반환 값이 없는 경우 <code>undefined</code>를 반환합니다.</li>\n    </ul>\n    <p><strong>쉼표 연산자</strong></p>\n    <ul>\n        <li>쉼표 연산자는 왼쪽 피연산자를 평가하고 그 값을 버린 후, 오른쪽 피연산자를 평가하고 그 값을 반환합니다.</li>\n        <li>부수 효과가 있는 함수 호출과 함께 사용하여 코드를 간결하게 만들 수 있습니다.</li>\n    </ul>\n    <p><strong>선언과 문</strong></p>\n    <ul>\n        <li><code>let</code>, <code>const</code>, 함수, 클래스 선언은 문이 아닙니다.</li>\n        <li><code>var</code>를 사용한 변수 선언만이 유일하게 문입니다.</li>\n    </ul>\n    <p>\"JavaScript for Everyone\" 코스는 JavaScript의 작동 방식과 그 이유를 깊이 있게 다루며, 초보 개발자에게는 탄탄한 기초를, 경험이 있는 개발자에게는 깊이 있는 지식을 제공하는 것을 목표로 합니다.</p>\n    <p>코스는 10월 28일 자정까지 £60 할인된 가격인 £189에 구매할 수 있습니다.</p>\n    <p><a href=\"https://css-tricks.com/an-introduction-to-javascript-expressions/\">원문 링크</a></p>\n</body>","createdAt":"2025-10-22T19:08:23.000+00:00","link":"https://css-tricks.com/an-introduction-to-javascript-expressions/","language":"ko"}