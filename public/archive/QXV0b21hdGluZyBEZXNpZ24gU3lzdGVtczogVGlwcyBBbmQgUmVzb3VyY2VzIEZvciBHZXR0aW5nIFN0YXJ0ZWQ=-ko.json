{"content":"디자인 시스템은 단순한 색상이나 버튼 세트를 넘어 디자이너와 개발자가 협업하여 좋은 제품을 구축하도록 돕는 공유 언어입니다. 디자인 시스템의 핵심은 색상, 간격, 글꼴과 같은 토큰, 버튼, 양식, 탐색과 같은 구성 요소, 그리고 이 모든 것을 프로젝트 전반에 걸쳐 연결하는 규칙 및 문서입니다.\n\nGoogle Material Design 또는 Shopify Polaris와 같은 시스템을 사용해 본 경험이 있다면 디자인 시스템이 구조와 동작에 대한 명확한 기대치를 설정하여 팀워크를 더 원활하고 빠르게 만든다는 것을 알 수 있습니다. 그러나 디자인 시스템은 일관성을 증진시키지만, 모든 것을 동기화 상태로 유지하는 것이 어려운 부분입니다. Figma에서 색상이나 간격 값과 같은 토큰을 업데이트하면 해당 변경 사항이 코드, 문서 및 사용되는 다른 모든 곳에 반영되어야 합니다.\n\n구성 요소도 마찬가지입니다. 버튼 동작이 변경되면 시스템 전체에서 업데이트되어야 합니다. 여기서 올바른 도구와 약간의 자동화가 차이를 만들 수 있습니다. 반복적인 작업을 줄이고 시스템이 성장함에 따라 더 쉽게 관리할 수 있도록 도와줍니다.\n\n이 기사에서는 토큰 동기화, 구성 요소 업데이트, 문서 최신 상태 유지에 대한 다양한 도구 및 기술을 다루며 자동화가 모든 것을 어떻게 쉽게 만들 수 있는지 보여줍니다.\n\n자동화의 빌딩 블록\n\n기본부터 시작하겠습니다. 색상, 타이포그래피, 간격, 모서리 반경, 그림자 및 시각적 언어를 구성하는 모든 작은 값은 디자인 토큰이라고 하며 UI의 단일 진실 공급원으로 사용됩니다. Figma와 같은 디자인 소프트웨어, 코드, 스타일 가이드, 문서에서 이러한 토큰을 볼 수 있습니다. Smashing Magazine에서는 이미 자세히 다루었습니다.\n\n문제는 종종 동기화되지 않는다는 것입니다. 예를 들어 디자인에서 색상이나 구성 요소가 변경되었지만 코드에서 업데이트되지 않는 경우입니다. 팀이 성장하거나 변경될수록 이러한 불일치가 더 많이 나타납니다. 사람들이 주의를 기울이지 않아서가 아니라 수동 동기화가 확장되지 않기 때문입니다. 그렇기 때문에 디자인 시스템 구축을 시작할 때 팀이 가장 먼저 고려해야 할 사항은 일반적으로 토큰 자동화입니다. 이런 식으로 Figma에 동일한 색상 값을 다시 구성 파일에 다시 작성하는 대신 공유 토큰 소스에서 가져와 디자인과 개발 모두를 구동하도록 할 수 있습니다.\n\n이것을 더 쉽게 만들도록 설계된 몇 가지 도구가 있습니다.\n\nToken Studio\n\nToken Studio는 Figma 플러그인으로, 파일 내에서 직접 디자인 토큰을 관리하고 다양한 형식으로 내보내고 코드로 동기화할 수 있습니다.\n\nSpecify\n\nSpecify는 Figma에서 토큰을 수집하여 GitHub 리포지토리, 지속적 통합 파이프라인, 문서 등을 포함한 다양한 대상으로 푸시할 수 있게 합니다.\n\nNameDesignTokens.guide\n\nNamedDesignTokens.guide는 이름 지정 규칙에 도움이 되는데, 특히 많은 수의 토큰을 다룰 때 공통적인 문제점입니다.\n\n토큰이 설정되고 연결되면 불일치를 수정하는 데 훨씬 적은 시간을 할애할 수 있습니다. 또한 테마 추가, 브랜드 전환, 심지어 여러 제품에 대한 시스템 구축과 같은 확장성을 위한 견고한 기반을 제공합니다.\n\n그때부터 이름 지정이 정말 중요해집니다. 토큰이나 구성 요소의 이름이 명확하게 지정되지 않으면 혼란스러워질 수 있습니다.\n\n참고: Vitaly Friedman의 \"How to Name Things\"는 더 큰 시스템으로 작업하는 경우 확인해 볼 가치가 있습니다.\n\n거기서부터는 모두 구성 요소에 관한 것입니다. 토큰은 값을 정의하지만 구성 요소는 사람들이 실제로 사용하는 것입니다. 예를 들어 버튼, 입력란, 카드, 드롭다운 등이 있습니다. 완벽한 설정에서는 구성 요소를 한 번 구축하고 어디서나 재사용합니다. 그러나 구조 없이는 \"범위를 벗어나\" 쉽게 \"드리프트\"할 수 있습니다. 예를 들어 동일한 버튼의 다섯 가지 버전을 갖게 되며 코드에 있는 내용이 Figma에 있는 내용과 일치하지 않을 수 있습니다.\n\n자동화는 디자인을 대체하는 것이 아니라 모든 것을 하나의 소스에 연결합니다.\n\nFigma 구성 요소는 프로덕션의 구성 요소와 일치하고, 구성 요소가 변경되면 문서가 업데이트되며, 팀 전체가 자체 버전을 다시 구축하는 대신 동일한 라이브러리에서 가져옵니다. 이것이 진정한 협업이 일어나는 곳입니다.\n\n이를 돕는 몇 가지 도구가 있습니다.\n\n도구\n\n무엇을 하나요\n\nUXPin Merge\n\n실제 코드 구성 요소를 사용하여 디자인할 수 있습니다. 프로토타이핑하는 것이 구축하는 것입니다.\n\nSupernova\n\n디자인 시스템을 게시하고 디자인 및 코드 소스를 동기화하며 문서를 최신 상태로 유지하는 데 도움이 됩니다.\n\nZeroheight\n\nFigma 구성 요소를 팀 전체를 위한 중앙 집중식, 검색 가능한 문서 시스템으로 전환합니다.\n\n모든 것이 어떻게 연결되나요?\n\n작업의 많은 부분이 디자인 애플리케이션 내에서 시작됩니다. 토큰과 구성 요소가 제자리에 있으면 Supernova와 같은 도구를 사용하여 디자인 데이터를 추출하고 여러 플랫폼에서 동기화하며 프로덕션 준비 코드를 생성하여 더 나아갈 수 있습니다. 자동화로부터 가치를 얻기 위해 사용자 지정 스크립트를 작성하거나 Figma API를 사용할 필요가 없습니다. 이러한 도구가 대부분을 처리합니다.\n\n그러나 완전한 제어를 원하는 팀의 경우 Figma는 API를 제공합니다. 이를 통해 다음을 수행할 수 있습니다.\n\nFigma 파일에서 직접 색상, 간격, 타이포그래피와 같은 토큰 값을 가져옵니다.\n\n구성 요소 및 변형의 변경 사항을 추적합니다.\n\n스타일 이름, 구조 또는 사용 패턴과 같은 메타데이터를 읽습니다.\n\n어떤 구성 요소가 어디에서 사용되는지 디자인에서 매핑합니다.\n\nFigma API는 REST 기반이므로 사용자 지정 스크립트 및 자동화와 잘 작동합니다. 대규모 설정이 필요하지 않고 올바른 조각만 있으면 됩니다. 개발 측에서는 팀이 일반적으로 Node.js 또는 Python을 사용하여 자동화를 처리합니다. 예를 들어:\n\nFigma에서 스타일을 가져옵니다.\n\nJSON으로 변환합니다.\n\n값을 디자인 토큰 리포 또는 코드베이스에 직접 푸시합니다.\n\n대부분의 사용 사례에 대해 이러한 수준의 설정이 필요하지는 않지만 팀이 노코드 도구를 능가하는 경우 유용하다는 것을 알아두는 것이 좋습니다.\n\n토큰과 구성 요소는 어디에서 오나요?\n\n업데이트는 어떻게 이루어지나요?\n\n무엇이 모든 것을 연결 상태로 유지하나요?\n\n이것이 명확해지면 워크플로를 관리하기가 더 쉬워지고 변경 사항이나 불일치를 수정하는 데 시간을 덜 소비하게 됩니다. 토큰, 구성 요소 및 문서가 동기화 상태로 유지되면 팀은 더 빠르게 이동하고 동일한 문제를 수정하는 데 시간을 덜 소비합니다.\n\n디자인 데이터 추출\n\nFigma는 버튼, 레이아웃, 스타일, 구성 요소 등 제품의 시각적 언어를 구성하는 모든 것을 만드는 데 사용되는 협업 디자인 도구입니다. 또한 우리가 이전에 논의한 토큰을 포함하여 모든 디자인 데이터가 상주하는 곳입니다. 이 데이터는 추출하여 결국 코드베이스에 연결할 데이터입니다. 그러나 먼저 설정을 해야 합니다.\n\n따라가려면:\n\nfigma.com으로 이동하여 무료 계정을 만듭니다.\n\n로컬에서 작업하는 것을 선호하는 경우 Figma 데스크톱 앱을 다운로드하지만 구형 장치를 사용하는 경우 시스템 요구 사항에 주의하십시오.\n\n일단 들어가면 다음과 같은 홈 화면이 표시됩니다.\n\n여기서 디자인 토큰을 설정할 차례입니다. 처음부터 모든 것을 만들거나 Figma 커뮤니티의 템플릿을 사용하여 시간을 절약할 수 있습니다. 모든 것을 직접 구축하고 싶지 않다면 템플릿이 좋은 옵션입니다. 그러나 완전한 제어를 선호한다면 자신만의 설정을 만드는 것도 좋습니다.\n\n토큰을 얻는 다른 방법도 있습니다. 예를 들어 namedesigntokens.guide와 같은 사이트를 사용하면 JSON과 같은 형식으로 토큰을 생성하고 다운로드할 수 있습니다. 유일한 단점은 Figma가 JSON을 직접 가져올 수 없다는 것입니다. 따라서 해당 경로를 사용하려면 Specify와 같은 중간 도구를 사용하여 이 격차를 해소해야 합니다. Figma, GitHub 및 기타 장소 간의 토큰을 동기화하는 데 도움이 됩니다.\n\n이 기사에서는 간단하게 Figma에 집중하겠습니다. 시작하기 위해 Figma 커뮤니티에서 디자인 시스템 템플릿을 선택하십시오. 선택할 수 있는 것이 많이 있습니다.\n\n선택하는 템플릿에 따라 색상, 타이포그래피, 간격, 구성 요소 등을 포함하는 사전 정의된 토큰 세트를 얻게 됩니다. 이러한 템플릿은 웹사이트, 전자 상거래, 포트폴리오, 앱 UI 키트 등 모든 종류가 있습니다. 이 기사에서는 대부분의 필요한 토큰이 즉시 포함되어 있기 때문에 /Design-System-Template--Community를 사용할 것입니다. 그러나 다른 것을 시도하고 싶다면 다른 것을 선택해도 좋습니다.\n\n템플릿을 선택하면 토큰을 다운로드할 차례입니다. Figma 파일에 직접 연결하고 디자인 토큰, 스타일 및 구성 요소를 가져오는 도구인 Supernova를 사용할 것입니다. 이를 통해 디자인-코드 프로세스가 훨씬 원활해집니다.\n\n1단계: Supernova에 가입\n\nsupernova.io로 이동하여 계정을 만듭니다. 로그인하면 다음과 같은 대시보드에 액세스하게 됩니다.\n\n2단계: Figma 파일 연결\n\n토큰을 가져오려면 Supernova의 데이터 소스 섹션으로 이동하여 사용 가능한 소스 목록에서 Figma를 선택합니다. (Storybook 또는 Figma 변수와 같은 다른 옵션도 볼 수 있지만 Figma에 중점을 둡니다.) 다음으로 새 파일 연결을 클릭하고 Figma 템플릿 링크를 붙여넣은 다음 가져오기를 클릭합니다.\n\nSupernova는 템플릿에서 전체 디자인 시스템을 로드합니다. 대시보드에서 모든 토큰을 볼 수 있습니다.\n\n토큰을 코드로 전환\n\n디자인 토큰은 Figma 내에서 훌륭하지만 실제 가치는 코드로 전환될 때 나타납니다. 이것이 팀의 개발자가 실제로 사용하는 방법입니다.\n\n이것이 문제입니다. 많은 팀이 색상, 간격, 타이포그래피와 같은 항목에 대해 값을 수동으로 복사하는 것을 기본으로 합니다. 그러나 Figma에서 변경하면 코드가 즉시 동기화되지 않습니다. 그렇기 때문에 이 프로세스를 자동화하는 것이 큰 이점입니다.\n\n모든 프로젝트에 대해 동일한 테마 설정을 다시 작성하는 대신 생성하고, 디자인을 개발 준비 자산으로 지속적으로 변환하고, 단일 진실 공급원에서 모든 것을 동기화 상태로 유지합니다.\n\n이제 Supernova에서 모든 토큰을 가져왔으므로 코드로 전환해 보겠습니다. 먼저 코드 자동화 탭으로 이동한 다음 새 파이프라인을 클릭합니다. 생성하려는 내용에 따라 React Native, CSS-in-JS, Flutter, Godot 등 다양한 옵션을 볼 수 있습니다.\n\n데모를 위해 CSS-in-JS 옵션을 사용해 보겠습니다.\n\n그 후 데이터, 구성, 제공의 세 섹션이 있는 설정 화면에 액세스하게 됩니다.\n\n데이터\n\n여기서 테마를 선택할 수 있습니다. 처음에는 \"검정\" 옵션만 제공될 수 있습니다. 해당 옵션을 선택하거나 비워 둘 수 있습니다. 현재로서는 그다지 중요하지 않습니다.\n\n구성\n\n여기서 코드 구조를 제어합니다. 토큰 이름 형식에 PascalCase를 선택했습니다. 간격, 색상 또는 글꼴 스타일과 같은 항목을 그룹화하고 저장하는 방법을 업데이트할 수도 있습니다.\n\n제공\n\n여기서 출력을 제공하는 방법을 선택합니다. \"빌드만\"을 선택하여 코드를 빌드하여 다운로드했습니다.\n\n완료되면 저장을 클릭합니다. 파이프라인이 생성되고 대시보드에 나열됩니다. 여기서 이미 생성된 토큰 코드를 다운로드할 수 있습니다.\n\n문서 자동화\n\n그렇다면 디자인 시스템에서 문서의 요점은 무엇일까요?\n\n팀을 위한 사용 설명서로 생각할 수 있습니다. 각 토큰이나 구성 요소가 무엇인지, 왜 존재하는지, 그리고 어떻게 사용되는지를 설명합니다. 디자이너, 개발자 및 팀의 다른 모든 사람이 동일한 페이지에 있을 수 있습니다. 추측도 없고 왔다 갔다 하지도 않습니다. 명확한 맥락만 있습니다.\n\n중단한 부분부터 계속하겠습니다. Supernova는 문서를 처리할 수 있습니다. 문서 탭으로 이동합니다. 여기서 디자인 시스템 문서에 대한 모든 것을 같은 장소에서 편집할 수 있습니다.\n\n다음을 수행할 수 있습니다.\n\n토큰에 설명을 추가합니다.\n\n각 기본 토큰이 무엇을 위한 것인지 (그리고 무엇을 위한 것이 아닌지) 정의합니다.\n\n색상, 타이포그래피, 간격 또는 구성 요소별로 섹션을 구성합니다.\n\n이미지, 코드 스니펫 또는 예제를 넣습니다.\n\n토큰이 있는 동일한 도구 내에서 문서를 작성하고 있습니다. 즉, 도구 간에 이동할 필요가 없고 추가 설정도 필요하지 않습니다. 여기서 자동화가 작동합니다. 한 번 편집하면 문서가 디자인 소스와 동기화 상태로 유지됩니다. 모든 것이 단일 환경에 유지됩니다.\n\n완료되면 게시를 클릭하면 로그인하라는 새 창이 표시됩니다. 그 후 라이브 문서 사이트에 액세스할 수 있습니다.\n\n자동화를 위한 실질적인 팁\n\n자동화는 훌륭합니다. 수많은 수동 작업을 절약하고 디자인 시스템을 디자인과 코드 전반에 걸쳐 긴밀하게 유지합니다. 요령은 언제 자동화해야 하는지, 그리고 시간이 지남에 따라 계속 작동하도록 하는 방법을 아는 것입니다. 모든 것을 즉시 자동화할 필요는 없습니다. 그러나 같은 일을 반복해서 하고 있다면 그것은 일종의 적신호입니다.\n\n자동화를 고려해야 할 시점의 몇 가지 징후:\n\n여러 플랫폼(웹 및 모바일 등)에 걸쳐 동일한 스타일을 사용합니다.\n\n둘 이상의 팀에서 사용하는 공유 디자인 시스템이 있습니다.\n\n디자인 토큰이 자주 변경되며 코드에 업데이트가 자동으로 흐르도록 하려면\n\n브랜드 팀이 색상을 조정할 때마다 수동 업데이트에 지쳤습니다.\n\n고려해야 할 세 가지 단계가 있습니다. 각 단계를 살펴보겠습니다.\n\n1단계: 도구 및 API 업데이트 주시\n\n파이프라인이 Figma와 같은 디자인 도구나 Supernova와 같은 플랫폼에 의존하는 경우 변경 사항을 알고 작업을 평가해야 합니다. 작은 업데이트라도 내보내기에 조용히 영향을 미칠 수 있기 때문입니다.\n\n특히 토큰 동기화에 문제가 있는 경우 Figma의 API 변경 로그를 가끔 확인하는 것이 좋습니다. 종종 변수 및 구성 요소의 구조를 업데이트하며, 이는 파이프라인에 영향을 미칠 수 있습니다. 제품 업데이트에 대한 RSS 피드도 있습니다.\n\nSupernova의 제품 업데이트도 마찬가지입니다. 토큰 처리 또는 내보내기 방식을 조정할 수 있는 개선 사항을 정기적으로 출시합니다. Style Dictionary와 같은 오픈 소스 도구를 사용하는 경우 GitHub 리포지토리(특히 이슈 탭)를 주시하면 나중에 이상한 토큰 이름 변경으로 인한 디버깅을 피할 수 있습니다.\n\n이 모든 것은 릴리스 노트를 계속 주시하는 것이 아니라 무언가 갑자기 작동을 멈추는지 확인하는 시스템을 갖는 것입니다. 그렇게 하면 프로덕션에 도달하기 전에 문제를 포착할 수 있습니다.\n\n2단계: 파이프라인을 더 작은 단계로 분할\n\n팀이 저지르는 일반적인 함정은 모든 것을 한 번의 대규모 실행(색상, 간격, 테마, 구성 요소 및 문서)으로 자동화하려고 시도하는 것입니다. 편리하게 들리지만 유지 관리가 어렵고 디버깅은 훨씬 더 어렵습니다.\n\n자동화를 조각으로 나누는 것이 훨씬 더 관리하기 쉽습니다. 예를 들어 핵심 디자인 토큰(예: 색상, 간격 및 글꼴 크기)을 처리하는 단일 워크플로, 테마 변형(예: 밝은 테마 및 어두운 테마)을 위한 또 다른 워크플로, 구성 요소 매핑(예: 버튼, 입력란 및 카드)을 위한 또 다른 워크플로를 갖는 것입니다. 이런 식으로 팀이 Figma에서 간격 토큰의 이름을 지정하는 방식을 변경하는 경우 전체 시스템이 아니라 워크플로의 한 부분만 업데이트하면 됩니다. 더 작은 단계를 테스트하고 재사용하는 것도 더 쉽습니다.\n\n3단계: 내보낸 결과물을 항상 테스트\n\n모든 것이 원활하게 실행되더라도 항상 내보낸 결과물을 확인하는 데 시간을 할애하십시오. 복잡할 필요는 없습니다. 몇 가지 주요 사항:\n\n토큰 이름이 깔끔하고 읽기 쉬운가요?PrimaryColorColorText와 같은 것을 보면 적신호입니다.\n\n예상치 못하게 사라지거나 이름이 변경된 것이 있나요?디자인 변경 후 타이포그래피 또는 간격 토큰의 경우 특히 그렇습니다.\n\nUI가 여전히 작동하나요?Tailwind, CSS 변수 또는 사용자 지정 테마와 같은 것을 사용하는 경우 새 토큰 값이 디자인 또는 빌드 프로세스에서 문제를 일으키지 않는지 다시 확인하십시오.\n\n문제를 조기에 파악하려면 파이프라인 완료 직후 ESLint 또는 Stylelint와 같은 도구를 실행하는 것이 좋습니다. 배송되기 전에 이상한 구문이나 이름 지정 문제를 표시합니다.\n\nAI가 어떻게 도움이 될 수 있나요?\n\n자동화가 안정되면 워크플로를 향상시킬 수 있는 다음 계층인 AI가 있습니다. 코드를 작성하거나 목업을 생성하는 것뿐만 아니라 디자인 시스템에서 시간을 잡아먹는 작고 반복적인 작업을 돕는 것입니다. 제대로 사용하면 AI는 시스템에 대한 제어를 대체하지 않고도 지원할 수 있습니다.\n\n다음은 워크플로에 적합할 수 있는 곳입니다.\n\n이름 제안\n\n수백 개의 토큰을 다룰 때 명확하고 일관되게 이름을 지정하는 것은 실제적인 문제입니다. 일부 AI 도구는 디자인의 패턴을 기반으로 토큰 또는 구성 요소에 대한 깔끔하고 읽기 쉬운 이름을 제안하여 도움이 될 수 있습니다. 완벽하지는 않지만 특히 대규모 팀의 경우 이름 지정을 시작하는 좋은 방법입니다.\n\n패턴 인식\n\nAI는 디자인 파일 전반에 걸쳐 반복되는 스타일 또는 사용 패턴을 발견할 수도 있습니다. 여러 버튼 또는 카드가 유사한 간격, 그림자 또는 타이포그래피를 공유하는 경우 AI 기반 도구는 사람이 눈치채기 전에 시스템화를 위한 구성 요소를 그룹화하거나 제안할 수 있습니다.\n\n자동화된 문서\n\n모든 것을 처음부터 작성하는 대신 AI는 토큰, 스타일 및 사용을 기반으로 문서의 초안을 생성할 수 있습니다. 여전히 검토하고 다듬어야 하지만 빈 페이지 문제를 해결하고 몇 시간을 절약합니다.\n\n이미 실질적인 방식으로 디자인 및 개발 공간에 AI를 도입한 몇 가지 도구가 있습니다.\n\nUizard: Uizard는 AI를 사용하여 와이어프레임을 디자인으로 자동 변환합니다. 손으로 스케치하면 사용 가능한 목업으로 변환됩니다.\n\nAnima: Anima는 Figma 디자인을 반응형 React 코드로 변환할 수 있습니다. 또한 실제 콘텐츠 또는 레이아웃 구조를 채우는 데 도움이 되므로 AI 지원을 통해 디자인과 개발 간의 강력한 다리가 됩니다.\n\nBuilder.io: Builder는 AI를 사용하여 구성 요소를 시각적으로 생성하고 편집하는 데 도움을 줍니다. 특히 페이지를 빠르게 구축해야 하는 마케터 또는 비개발자에게 유용합니다. AI는 레이아웃, 콘텐츠 블록 및 디자인 규칙을 간소화하는 데 도움이 됩니다.\n\n결론\n\n이 기사는 기술적 의미에서 완전한 자동화를 달성하는 것이 아니라 디자인 시스템으로 작업하는 데 있어 하찮고 수동적인 측면을 간소화하기 위해 스마트 도구를 사용하는 것에 관한 것입니다. 토큰 내보내기, 문서 생성, 디자인과 코드 동기화는 자동화하여 올바른 설정을 통해 프로세스를 더 빠르고 안정적으로 만들 수 있습니다.\n\n매번 처음부터 모든 것을 다시 구축하는 대신 일관성을 유지하고, 정리 상태를 유지하며, 시간을 절약할 수 있는 방법을 갖추게 되었습니다.\n\n추가 자료\n\n\"Design System Guide\" by Romina Kavcic\n\n\"Design System In 90 Days\" by Vitaly Friedman","createdAt":"2025-08-12T09:15:18.656Z","language":"ko"}