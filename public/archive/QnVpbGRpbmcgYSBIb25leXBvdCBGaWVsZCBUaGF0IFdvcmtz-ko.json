{"title":"Building a Honeypot Field That Works","content":"<body>\n<h1>스팸 방지를 위한 허니팟 필드 구현 가이드</h1>\n\n<p>개발자는 스팸 제출을 방지하기 위해 허니팟 필드를 사용합니다. 이 방법은 2025년에도 여전히 효과적이며, reCAPTCHA와 같은 번거로운 메커니즘을 대체할 수 있습니다. 하지만 스팸 봇이 허니팟 필드를 탐지하지 못하도록 몇 가지 주의사항을 지켜야 합니다.</p>\n\n<h2>허니팟 필드 구현 시 주의사항</h2>\n<ul>\n  <li><code>display: none;</code> 속성을 사용하지 마십시오.</li>\n  <li>인라인 CSS로 허니팟 필드를 숨기지 마십시오.</li>\n</ul>\n\n<p>이러한 방법은 봇이 함정을 인지하고 건너뛰도록 만듭니다. 대신 다음과 같은 방법을 사용해야 합니다.</p>\n\n<ul>\n  <li>텍스트 필드를 사용하십시오.</li>\n  <li>인라인이 아닌 CSS를 사용하여 필드를 숨기십시오.</li>\n</ul>\n\n<p>일반적인 예시는 다음과 같습니다.</p>\n\n<pre>\n.visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n</pre>\n\n<p>이 방식은 봇이 허니팟 필드를 일반적인 필드와 구별하기 어렵게 만듭니다.</p>\n\n<h2>봇 탐지 회피를 위한 추가 Enhancements</h2>\n<p>다음 Enhancements는 허니팟 필드 대신 <code>form</code> 태그에서 구현해야 합니다. 이는 JavaScript를 사용하여 사용자가 사람인지 여부를 감지하는 데 중점을 둡니다.</p>\n\n<ul>\n  <li><code>mousemove</code> 이벤트 감지</li>\n  <li><code>keyboard</code> 이벤트 감지</li>\n  <li>폼 제출 속도 확인 (사람은 빠르게 입력할 수 없음)</li>\n</ul>\n\n<p>이러한 기능을 쉽게 사용하기 위해 Splendid Labz에서 제공하는 <code>Form</code> 컴포넌트를 활용할 수 있습니다.</p>\n\n<p>Astro 사용자는 JavaScript를 활성화해야 합니다.</p>\n\n<pre>\n---\nimport { Form, Honeypot } from '@splendidlabz/svelte'\n---\n</pre>\n\n<p>바닐라 JavaScript 또는 다른 프레임워크를 사용하는 경우, <code>preventSpam</code> 유틸리티를 사용할 수 있습니다.</p>\n\n<pre>\nimport { preventSpam } from '@splendidlabz/utils/dom'\n\nlet form = document.querySelector('form')\nform = preventSpam(form, { honeypotField: 'honeypot' })\n\nform.addEventListener('submit', event => {\n  event.preventDefault()\n  if (form.containsSpam) return\n  else form.submit()\n})\n</pre>\n\n<p>또는 JavaScript를 사용하여 사용자의 페이지 상호작용을 감지할 수 있습니다.</p>\n\n<pre>\nexport function preventSpam(\n  form,\n  { honeypotField = 'honeypot', honeypotDuration = 2000 } = {}\n) {\n  const startTime = Date.now()\n  let hasInteraction = false\n\n  function checkForInteraction() {\n    hasInteraction = true\n  }\n\n  const events = ['keydown', 'mousemove', 'touchstart', 'click']\n  events.forEach(event => {\n    form.addEventListener(event, checkForInteraction, { once: true })\n  })\n\n  form.containsSpam = function () {\n    const fillTime = Date.now() - startTime\n    const isTooFast = fillTime < honeypotDuration\n    const honeypotInput = form.querySelector(`[name=\"${honeypotField}\"]`)\n    const hasHoneypotValue = honeypotInput?.value?.trim()\n    const noInteraction = !hasInteraction\n\n    events.forEach(event =>\n      form.removeEventListener(event, checkForInteraction)\n    )\n\n    return isTooFast || !!hasHoneypotValue || noInteraction\n  }\n}\n</pre>\n\n<h2>더 나은 폼</h2>\n<p>HTML 폼 요소를 더 쉽게 사용할 수 있도록 개선된 솔루션을 개발 중입니다. 이는 접근성을 높이고 사용하기 쉬운 구문을 제공합니다.</p>\n\n<p>관심이 있다면 <a href=\"https://splendidlabz.com/forms\">랜딩 페이지</a>를 방문해 주세요.</p>\n\n<h2>마무리</h2>\n<p>허니팟 필드가 효과적이려면 몇 가지 트릭이 필요합니다. 가장 좋은 방법은 스팸 봇이 허니팟 필드를 실제 필드로 착각하게 만드는 것입니다. 봇을 속이고 싶지 않다면 위에 설명된 다른 봇 탐지 메커니즘을 사용할 수 있습니다.</p>\n\n<p>이 내용이 유용했기를 바랍니다!</p>\n\n<p>Building a Honeypot Field That Works는 DigitalOcean 제품군인 CSS-Tricks에 처음 게시되었습니다. 뉴스레터를 받아보시는 것을 추천합니다.</p>\n</body>\n","createdAt":"2025-10-20T16:11:40.000+00:00","link":"https://css-tricks.com/building-a-honeypot-field-that-works/","language":"ko"}