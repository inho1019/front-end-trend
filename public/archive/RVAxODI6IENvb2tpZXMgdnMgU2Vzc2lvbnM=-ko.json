{"title":"EP182: Cookies vs Sessions","content":"<body>\n    <p>MCP Registry는 LLM이 도구를 쉽게 발견하도록 돕지만, 발견만으로는 충분하지 않습니다. 도구는 사용자 대신 작동해야 하며, 이를 위해서는 안전하고 위임된 액세스가 필요합니다. API 키는 사용하기 어렵고, 사용자 흐름을 방해하며, 원활한 통합이라는 약속을 약화시킵니다. WorkOS Connect는 PKCE, 스코프, 사용자 동의, 안전한 토큰 발급을 처리하는 완전 규격 OAuth 2.1 흐름을 제공합니다.</p>\n    <p><strong>WorkOS 장점:</strong></p>\n    <ul>\n        <li>MCP OAuth 2.1 규격 준수</li>\n        <li>리디렉션, 동의, 스코프 처리</li>\n        <li>간편한 통합 및 빠른 출시</li>\n    </ul>\n    <p>WorkOS Connect로 안전한 MCP 인증을 구현하세요.</p>\n    <p><strong>이번 주 시스템 디자인 복습:</strong></p>\n    <ul>\n        <li>FAANG 시스템 디자인 면접: 채팅 시스템 설계 (유튜브 영상)</li>\n        <li>쿠키 vs 세션</li>\n        <li>액세스 제어 명확히 설명</li>\n        <li>전체 파인튜닝 vs LoRA vs RAG</li>\n        <li>Git Reset 작동 방식</li>\n        <li>Apache Kafka 설명 (개괄적)</li>\n    </ul>\n    <p><strong>쿠키 vs 세션:</strong></p>\n    <ul>\n        <li>쿠키: 클라이언트에 직접 데이터를 저장합니다.</li>\n        <li>세션: 서버에 데이터를 저장하고, 클라이언트는 세션 ID만 저장합니다.</li>\n    </ul>\n    <p><strong>액세스 제어 명확히 설명:</strong></p>\n    <ul>\n        <li>RBAC (역할 기반 액세스 제어): 역할에 따라 접근을 제어합니다.</li>\n        <li>ABAC (속성 기반 액세스 제어): 사용자, 리소스, 환경 등 속성에 따라 접근을 제어합니다.</li>\n        <li>ACL (액세스 제어 목록): 각 사용자 또는 그룹에 대한 명시적 권한을 부여합니다.</li>\n    </ul>\n    <p><strong>전체 파인튜닝 vs LoRA vs RAG:</strong></p>\n    <ul>\n        <li>전체 파인튜닝: 모든 가중치를 재학습하여 높은 정확도를 얻지만, 많은 컴퓨팅 파워와 스토리지가 필요합니다.</li>\n        <li>LoRA 파인튜닝: 주요 가중치를 동결하고 작은 추가 계층만 학습하여 더 빠르고 저렴합니다.</li>\n        <li>RAG: 모델을 재학습하지 않고 필요할 때 외부 소스에서 정보를 검색하여 쿼리를 강화합니다.</li>\n    </ul>\n    <p><strong>Git Reset 작동 방식:</strong></p>\n    <ul>\n        <li>--soft: HEAD만 이동하고, 스테이지 및 작업 디렉토리는 그대로 둡니다.</li>\n        <li>--mixed (기본값): HEAD를 이동하고, 스테이지를 해당 스냅샷으로 업데이트하지만, 작업 디렉토리는 그대로 둡니다.</li>\n        <li>--hard: HEAD를 이동하고, 스테이지 및 작업 디렉토리까지 해당 커밋과 일치시킵니다.</li>\n    </ul>\n    <p><strong>Apache Kafka 설명 (개괄적):</strong></p>\n    <p>Kafka는 대규모 데이터 스트림을 낮은 지연 시간과 높은 안정성으로 처리하기 위한 분산 이벤트 스트리밍 플랫폼입니다.</p>\n    <ul>\n        <li>프로듀서: Kafka 토픽에 메시지를 게시하는 애플리케이션입니다.</li>\n        <li>토픽 & 파티션: 메시지는 토픽으로 구성되며, 확장성과 병렬성을 위해 파티션으로 분할됩니다.</li>\n        <li>브로커 클러스터: Kafka 브로커는 파티션 데이터를 저장하고 제공합니다.</li>\n        <li>KRaft (컨트롤러 쿼럼): 클러스터 메타데이터 및 리더 선거를 조정합니다.</li>\n        <li>소비자 그룹: 토픽을 구독하고 메시지를 소비하는 애플리케이션입니다.</li>\n    </ul>\n</body>","createdAt":"2025-09-27T15:30:19.000+00:00","link":"https://blog.bytebytego.com/p/ep182-cookies-vs-sessions","language":"ko"}