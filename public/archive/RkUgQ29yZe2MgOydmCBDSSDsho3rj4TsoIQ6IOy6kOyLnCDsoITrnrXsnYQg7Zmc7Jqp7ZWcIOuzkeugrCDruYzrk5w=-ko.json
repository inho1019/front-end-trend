{"title":"FE Core팀의 CI 속도전: 캐시 전략을 활용한 병렬 빌드","content":"<body>\n  <h1>CI 파이프라인 개선 요약</h1>\n  \n  <h2>1. 개요</h2>\n  <p>FE Core팀은 빈번한 변경이 발생하는 monorepo 환경에서 효율적이고 안정적인 CI 파이프라인 구축을 목표로 다양한 전략을 도입했습니다. 본문에서는 빌드 성능 개선, 캐시 활용 방안, 그리고 각 전략의 효과를 다룹니다.</p>\n  \n  <h2>2. 기존 파이프라인 구조와 한계</h2>\n  <h3>2.1 Monorepo 환경의 CI 요구사항</h3>\n  <ul>\n    <li>30여 개의 독립적인 상용 프로젝트가 turborepo 기반 monorepo에 공존</li>\n    <li>각 프로젝트는 별도 팀 운영, 상이한 배포 일정 및 서비스 특성</li>\n    <li>main 브랜치 병합 빈번, pnpm-lock.yaml 파일 잦은 변경 수반</li>\n    <li>패키지 의존성 변동 통제 한계로 main 브랜치 변경 시 모든 프로젝트 빌드 및 검증 필요</li>\n  </ul>\n  <h3>2.2 빌드 시간 및 신뢰성 이슈</h3>\n  <ul>\n    <li>Turborepo 원격 캐시 서버 별도 운영(Kubernetes 기반), paths-filter@v3 활용</li>\n    <li>캐시 미적중 시 30개 이상 Next.js 앱 전체 빌드에 평균 20분 이상 소요</li>\n    <li>워크플로우 동시 실행 시 브랜치 병합 대기 시간 30분 이상 증가</li>\n    <li>빌드 시간 길어질 경우 워크플로우 중단 또는 \"Error: The operation was canceled.\" 오류 빈번 발생</li>\n  </ul>\n  \n  <h2>3. 개선 전략 및 구현</h2>\n  <h3>3.1 Runner 사양 개선</h3>\n  <ul>\n    <li>Ubuntu Runner의 메모리 및 코어 수 상향 조정</li>\n    <li>파이프라인 전체 실행 시간 약 20분에서 10분대로 단축</li>\n    <li>중단 오류 없이 안정적인 빌드 완료</li>\n    <li><p><strong>주요 결과:</strong></p>\n      <ul>\n        <li>평균 빌드 시간: 20분대 → 10분대</li>\n      </ul>\n    </li>\n  </ul>\n  <h3>3.2 병렬 빌드(Matrix) 도입</h3>\n  <ul>\n    <li>GitHub Workflow의 Matrix 전략 도입하여 각 프로젝트 빌드 병렬 수행</li>\n    <li><strong>이점:</strong> 프로젝트별 빌드 동시 진행, 각 빌드 성공 여부 개별 확인, 캐시 서버 활용 효율적 리소스 분배</li>\n    <li><p><strong>구현 예시:</strong></p>\n      <p><code>jobs: generate-matrix: ... build: needs: [generate-matrix] runs-on: ubuntu-22.04-cores strategy: matrix: ... fail-fast: false ...</code></p>\n    </li>\n    <li><p><strong>주요 결과:</strong></p>\n      <ul>\n        <li>캐시 미적중 시: 10m27s → 8m6s ( -2m21s, -22.5%)</li>\n        <li>캐시 적중 시: 1m14s → 6m57s ( +5m43s, +463.5%) - (병렬화 오버헤드로 인한 시간 증가 단점)</li>\n      </ul>\n    </li>\n    <li>각 프로젝트 빌드 성공 여부를 별도 status check로 표시</li>\n  </ul>\n  <h3>3.3 캐시 최적화</h3>\n  <ul>\n    <li>Matrix 병렬 빌드 시 캐시 적중 시 시간 증가 문제 해결을 위해 turborepo의 dry-run 기능 활용</li>\n    <li><code>turbo run build --dry-run</code> 명령으로 캐시 상태 사전 점검</li>\n    <li><p><strong>프로세스:</strong></p>\n      <ul>\n        <li>모든 패키지가 캐시된 경우 빌드 단계 건너뜀</li>\n        <li>캐시 미적중 패키지만 matrix 대상으로 빌드 실행</li>\n      </ul>\n    </li>\n    <li><p><strong>구현 예시:</strong></p>\n      <p><code>- name: turborepo 캐시 확인 ... - name: 빌드 스킵 if: ...</code></p>\n    </li>\n    <li><p><strong>주요 결과:</strong></p>\n      <ul>\n        <li>캐시 미적중 시: 10m27s → 5m29s ( -4m58s, -47.5%)</li>\n        <li>캐시 적중 시: 1m14s → 1m11s ( -3s, -4%)</li>\n      </ul>\n    </li>\n  </ul>\n  <h3>3.4 빌드 검증 단계 분리</h3>\n  <ul>\n    <li>Workflow Matrix 활용 시 개별 빌드 결과가 status check로 기록되는 문제 해결</li>\n    <li>브랜치 보호 정책을 단일 status로 관리하기 위해 빌드 완료 후 추가 검증 단계 도입</li>\n    <li><p><strong>구현 예시:</strong></p>\n      <p><code>verify-build: needs: build-matrix ... steps: - name: 모든 빌드 성공 확인 ...</code></p>\n    </li>\n  </ul>\n  \n  <h2>4. 결과</h2>\n  <ul>\n    <li>Runner 사양 개선, 병렬 빌드, 캐시 상태 사전 점검, 빌드 검증 단계 분리 등 전략 조합</li>\n    <li>전체 CI 파이프라인 빌드 시간 최대 84% 단축</li>\n    <li><p><strong>주요 성과:</strong></p>\n      <ul>\n        <li>빌드 미적중 시 30분대 → 5분대 단축</li>\n        <li>캐시 적중 시 오버헤드 최소화 및 불필요 빌드 방지</li>\n        <li>브랜치 보호 정책을 단일 status로 관리</li>\n      </ul>\n    </li>\n    <li>프로젝트 수 증가 시에도 빌드 속도 및 안정성 하락 없이 효율적 대응 가능한 구조 마련</li>\n  </ul>\n  \n  <h2>5. 후기</h2>\n  <ul>\n    <li>단순 빌드 속도 향상을 넘어 효율적인 자동화 및 체계적인 캐시 전략의 중요성 재확인</li>\n    <li>실질적인 성능 개선 효과를 얻었으며, 더 나은 개발 환경 구축을 위한 노력 지속</li>\n    <li>프로젝트 규모 확장에도 안정적이고 유연하게 대응하기 위한 자동화 및 최적화 방안 지속 탐구 계획</li>\n  </ul>\n</body>","createdAt":"2025-06-10T15:00:00.000+00:00","link":"https://tech.socarcorp.kr/fe/2025/06/10/monorepo-ci-cd-pipeline.html","language":"ko"}