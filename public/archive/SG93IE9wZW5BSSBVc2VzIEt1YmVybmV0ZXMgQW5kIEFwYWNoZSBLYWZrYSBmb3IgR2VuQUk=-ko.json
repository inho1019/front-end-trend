{"title":"How OpenAI Uses Kubernetes And Apache Kafka for GenAI","content":"<body>\n    <p>OpenAI는 AI 개발의 핵심인 데이터 처리 속도와 품질을 향상시키기 위해 스트림 처리 플랫폼을 구축했습니다. 이 플랫폼은 Python 중심의 개발 환경, Kubernetes 기반의 확장성, 그리고 Kafka와의 안정적인 연동을 목표로 합니다. 이 시스템은 <code>PyFlink</code>를 기반으로 하며, 데이터의 실시간 처리를 통해 모델 학습 데이터의 신선도를 유지하고 실험 결과를 빠르게 피드백받는 데 기여합니다.</p>\n\n    <h2>주요 과제</h2>\n    <ul>\n        <li>Python 중심 개발 환경: AI 엔지니어들이 익숙한 Python으로 스트림 파이프라인을 구축할 수 있도록 <code>PyFlink</code>를 도입하고 확장했습니다.</li>\n        <li>클라우드 용량 및 확장성 제약: 클라우드 제공업체의 리소스 제한에 대응하여 안정적인 스트림 처리 작업을 보장해야 했습니다.</li>\n        <li>다중 프라이머리 Kafka 설정: 여러 Kafka 클러스터가 장애 발생 시에도 Flink 작업이 중단되지 않도록 고가용성 Kafka 설정을 지원해야 했습니다.</li>\n    </ul>\n\n    <h2>아키텍처</h2>\n    <p>OpenAI의 스트림 처리 플랫폼은 <code>PyFlink</code>를 중심으로 다음과 같은 계층으로 구성됩니다:</p>\n    <ul>\n        <li><strong>제어 평면 (Control Plane):</strong> Flink 작업의 관리, 클러스터 간 장애 조치 조정을 담당하며, 기존 서비스 배포 인프라와 통합됩니다.</li>\n        <li><strong>Kubernetes 기반 설정:</strong> <code>Flink Kubernetes Operator</code>를 사용하여 Flink 배포를 자동화하고, 네임스페이스별 격리를 통해 팀 간 파이프라인을 분리하여 안정성과 보안을 강화합니다.</li>\n        <li><strong>감시 서비스 (Watchdogs):</strong> Kafka 토폴로지 변경 사항을 모니터링하고, 새로운 파티션 추가 또는 클러스터 장애 발생 시 Flink 파이프라인을 자동으로 조정하여 안정성을 유지합니다.</li>\n        <li><strong>상태 및 스토리지 관리:</strong> <code>RocksDB</code>를 사용하여 로컬 상태를 관리하고, 고가용성 블롭 스토리지 계정을 통해 클러스터와 독립적인 영구 상태 저장소를 제공하여 장애 발생 시에도 상태를 복구하고 다른 클러스터로 원활하게 이동할 수 있도록 합니다. Azure Workload Identity 인증을 사용하여 보안을 강화했습니다.</li>\n    </ul>\n\n    <h2>PyFlink: Python 친화적인 스트림 처리</h2>\n    <p><code>PyFlink</code>는 Python 개발자가 Flink의 강력한 스트림 처리 기능을 활용할 수 있게 합니다. <code>DataStream API</code>는 세밀한 제어를, <code>Table/SQL API</code>는 SQL과 유사한 선언적 방식의 데이터 처리를 지원합니다. <code>PyFlink</code>는 프로세스 모드와 스레드 모드로 Python 연산자를 실행할 수 있으며, 각각 장단점이 있습니다. 일부 성능이 중요한 기능은 여전히 Java로 작성되어야 하는 제한점이 있습니다.</p>\n\n    <h2>Kafka 커넥터 설계</h2>\n    <p>OpenAI는 다중 프라이머리 Kafka 환경을 위해 사용자 지정 Kafka 커넥터를 개발했습니다. 읽기 작업은 여러 프라이머리에서 동시에 데이터를 소비할 수 있도록 하며, 쓰기 작업에는 <code>Prism Sink</code>가 사용됩니다. <code>Prism Sink</code>는 아직 엔드투엔드 정확히 한 번 보장(exactly-once guarantees)을 완벽하게 지원하지는 않습니다. 또한, Kafka 커넥터의 재시도 기능 강화 및 동적 Kafka 소스 커넥터 개발을 통해 안정성을 높였습니다.</p>\n\n    <h2>고가용성 및 장애 조치</h2>\n    <p>제어 평면은 Kubernetes 클러스터 장애 시 Flink 작업을 자동으로 다른 정상 클러스터로 이동시켜 서비스 연속성을 보장합니다. Flink 작업의 상태는 클러스터와 독립적인 고가용성 스토리지에 저장되어, 클러스터가 바뀌어도 상태를 유지하며 작업을 재개할 수 있습니다. 이는 컴퓨팅 및 스토리지 계층 모두에서 장애 발생 시에도 파이프라인이 중단되지 않도록 합니다.</p>\n\n    <h2>결론</h2>\n    <p>OpenAI의 스트림 처리 플랫폼 구축은 Python 중심의 워크플로우, 클라우드 장애로부터의 복원력, Kafka와의 원활한 통합을 가능하게 합니다. 이러한 시스템은 AI 연구의 속도와 모델 성능 향상에 필수적입니다. OpenAI는 <code>PyFlink</code> 및 Kafka 커넥터 개선과 같은 오픈 소스 기여를 통해 지속적으로 시스템을 발전시키고 있으며, 향후 더욱 사용자 친화적이고 강력한 스트림 처리 경험을 제공할 것으로 기대됩니다.</p>\n</body>","createdAt":"2025-10-06T15:30:46.000+00:00","link":"https://blog.bytebytego.com/p/how-openai-uses-kubernetes-and-apache","language":"ko"}