{"title":"How Salesforce Used AI To Reduce Test Failure Resolution Time By 30%","content":"<body>\n    <p>Salesforce는 매일 600만 건 이상의 자동화된 테스트를 실행하며, 이는 780억 개 이상의 가능한 테스트 조합을 다룹니다. 월간 15만 건의 실패와 하루 27,000건 이상의 코드 변경 요청이 발생합니다. 이전에는 개발자들이 수동으로 오류 로그와 코드 변경 사항을 분석하며 문제 해결에 평균 7일이 소요되었으나, 이는 개발자의 불만과 지연을 야기했습니다.</p>\n    <p>이에 Salesforce는 AI 기반의 테스트 실패(TF) 트리아지 에이전트를 개발하여 이 문제를 해결했습니다.</p>\n    <h2>AI 및 자동화 아키텍처</h2>\n    <ul>\n        <li>\n            <p><strong>시맨틱 검색 (FAISS):</strong> 과거 테스트 실패 및 해결 데이터에 대한 시맨틱 검색 인덱스를 구축하여, 새로운 실패 발생 시 과거의 유사한 문제와 해결책을 빠르게 찾아냅니다.</p>\n        </li>\n        <li>\n            <p><strong>컨텍스트 임베딩 및 파싱 파이프라인:</strong> 오류 로그 및 코드 스니펫을 정제하고 구조화하여, 코드와 오류 메시지의 의미를 포착하는 컨텍스트 임베딩을 생성합니다. 이를 통해 새로운 오류와 과거 수정 사항 간의 의미론적 비교가 가능해집니다.</p>\n        </li>\n        <li>\n            <p><strong>비동기 및 디커플링 파이프라인:</strong> AI 트리아지 프로세스가 CI/CD 워크플로우와 분리되어 비동기적으로 실행되도록 설계하여, 전체 지연 시간을 낮추고 코드 통합 및 테스트 활동을 방해하지 않습니다.</p>\n        </li>\n        <li>\n            <p><strong>LLM 추론 및 시맨틱 검색 하이브리드:</strong> 시맨틱 검색으로 가장 관련성 높은 과거 사례를 찾고, LLM이 이를 해석하여 명확하고 구체적인 권장 사항을 생성합니다. 이는 모호하거나 부정확한 결과를 방지하여 개발자의 신뢰를 높입니다.</p>\n        </li>\n    </ul>\n    <h2>개발 접근 방식 (Cursor 사용)</h2>\n    <p>AI 기반 페어 프로그래밍 및 코드 검색 도구인 Cursor를 사용하여 TF 트리아지 에이전트 개발 기간을 기존 몇 달에서 4~6주로 단축했습니다. Cursor는 기존 코드 패턴 검색, 아키텍처 옵션 탐색, 핵심 로직 집중을 용이하게 하여 개발 효율성을 크게 향상시켰습니다.</p>\n    <h2>결론</h2>\n    <p>Salesforce는 TF 트리아지 에이전트 구축을 통해 테스트 실패 해결 시간을 30% 단축하고 개발자 생산성을 크게 향상시켰습니다. 주요 성공 요인은 다음과 같습니다.</p>\n    <ul>\n        <li>\n            <p>벡터 검색 및 임베딩을 활용한 과거 실패 데이터 분석 및 LLM 추론을 통한 권장 사항 정확도 향상</p>\n        </li>\n        <li>\n            <p>비동기 파이프라인 설계를 통한 CI/CD 프로세스 효율성 유지 및 시스템 확장성 확보</p>\n        </li>\n        <li>\n            <p>Cursor와 같은 AI 개발 도구를 활용한 개발 주기 단축</p>\n        </li>\n        <li>\n            <p>점진적 배포 및 신뢰 구축을 통한 개발자들의 시스템 채택 촉진</p>\n        </li>\n    </ul>\n</body>","createdAt":"2025-10-14T15:30:28.000+00:00","link":"https://blog.bytebytego.com/p/how-salesforce-used-ai-to-reduce","language":"ko"}