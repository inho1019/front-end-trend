{"content":"<body>\n  <p>JavaScript 이벤트 리스너는 웹 애플리케이션의 상호작용에 필수적이지만, 제대로 관리되지 않으면 메모리 누수나 성능 문제를 일으킬 수 있습니다. 이벤트 리스너는 종종 제거되지 않으며, 파라미터가 필요한 경우 처리가 복잡해질 수 있습니다.</p>\n  <p>동적 목록에서 각 항목의 삭제 버튼에 이벤트 핸들러를 사용할 때 작업 ID를 파라미터로 전달하는 경우가 일반적입니다. 이 경우 작업 완료 후 이벤트 리스너를 제거하여 가비지 컬렉션을 돕는 것이 좋습니다.</p>\n  <p><strong>이벤트 리스너 추가 시 흔한 실수:</strong> <code>addEventListener</code> 메서드 내에서 파라미터와 함께 함수를 직접 호출하면, 클릭 이벤트 발생 전에 함수가 즉시 실행되어 버립니다. 이를 해결하려면 화살표 함수나 익명 함수를 사용해야 합니다.</p>\n  <ul>\n    <li>\n      화살표/익명 함수 사용: <code>button.addEventListener('click', (event) => { myFunction(event, param1, param2); });</code>\n    </li>\n    <li>\n      주의사항: 화살표/익명 함수는 <code>removeEventListener</code>로 직접 제거하기 어렵습니다. <code>AbortController</code>를 사용하거나, 제거가 필요하다면 함수를 참조로 저장해야 합니다.\n    </li>\n  </ul>\n  <p><strong>이벤트 핸들러에 파라미터 사용 방법:</strong></p>\n  <ol>\n    <li>\n      <strong>화살표 및 익명 함수:</strong> 가장 간단한 방법입니다.\n      <ul>\n        <li>\n          추가: <code>button.addEventListener(\"click\", (event) => { handleClick(event, \"hello\", \"world\"); });</code>\n        </li>\n        <li>\n          제거: <code>AbortController</code>를 사용합니다.\n          <ul>\n            <li>\n              <code>const controller = new AbortController();</code>\n            </li>\n            <li>\n              <code>button.addEventListener(\"click\", (event) => { handleClick(event, \"hello\", \"world\"); }, { signal: controller.signal });</code>\n            </li>\n            <li>\n              <code>controller.abort();</code>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>클로저:</strong> 함수가 외부 스코프의 변수에 접근할 수 있는 기능을 활용합니다.\n      <ul>\n        <li>\n          구현: <code>createHandler</code> 함수가 이벤트 핸들러 함수를 반환하도록 합니다.\n          <ul>\n            <li>\n              <code>function createHandler(message, number) { return function (event) { console.log(...); }; }</code>\n            </li>\n            <li>\n              <code>button.addEventListener(\"click\", createHandler(\"Hello, world!\", 1));</code>\n            </li>\n          </ul>\n        </li>\n        <li>\n          제거: 이벤트 핸들러 함수를 참조로 저장하여 <code>removeEventListener</code>를 사용합니다.\n          <ul>\n            <li>\n              <code>const handler = createHandler(\"Hello, world!\", 1);</code>\n            </li>\n            <li>\n              <code>button.addEventListener(\"click\", handler);</code>\n            </li>\n            <li>\n              <code>button.removeEventListener(\"click\", handler);</code>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <p><strong>결론:</strong> 이벤트 리스너는 불필요할 때 제거하여 메모리 누수를 방지해야 합니다. 파라미터가 필요한 경우 클로저, <code>AbortController</code>, <code>removeEventListener</code> 등을 활용하여 효과적으로 관리할 수 있습니다.</p>\n</body>","createdAt":"2025-08-20T05:20:03.407Z","language":"ko"}