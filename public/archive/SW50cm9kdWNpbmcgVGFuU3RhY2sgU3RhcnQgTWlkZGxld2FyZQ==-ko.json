{"title":"Introducing TanStack Start Middleware","content":"<body>\n  <h1>TanStack Start 미들웨어 소개</h1>\n  <p>TanStack Start는 서버 측 기능과 서버 측 렌더링(SSR)을 제공하는 풀스택 웹 개발 프레임워크입니다. 이 글에서는 TanStack Start의 강력한 기능인 '미들웨어'에 대해 집중적으로 다룹니다.</p>\n\n  <h2>SSR의 중요성</h2>\n  <p>SSR은 클라이언트 렌더링 SPA에 비해 LCP(Largest Contentful Paint) 성능을 향상시킵니다. SSR은 초기 콘텐츠를 첫 번째 요청 시 바로 제공하여 사용자 경험을 개선합니다.</p>\n\n  <h2>Prelude: Server Functions</h2>\n  <p>Server Functions는 TanStack Start에서 서버 측 코드를 실행하는 주요 메커니즘입니다. 데이터베이스 쿼리, 데이터 업데이트, 사용자 인증 등에 사용될 수 있습니다. 예시 코드는 다음과 같습니다:</p>\n  <pre><code>\nimport { createServerFn } from \"@tanstack/react-start\";\n\nexport const getServerTime = createServerFn().handler(async () => {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return new Date().toISOString();\n});\n  </code></pre>\n  <p>이 함수는 클라이언트 또는 서버 어디에서든 호출될 수 있으며, TanStack은 브라우저에서 호출될 경우 내부 URL로 네트워크 요청을 처리합니다.</p>\n\n  <h2>Getting Started</h2>\n  <p>이 글에서는 Jira 복제 앱을 예시로 사용하며, 해당 앱의 소스 코드는 <a href=\"https://github.com/TanStack/examples/tree/main/examples/next/ts/react-router/src/routes/app/epics\">GitHub 저장소</a>에서 확인할 수 있습니다. 앱은 다음과 같은 기능을 제공합니다:</p>\n  <ul>\n    <li>각 에픽에 연결된 작업 수</li>\n    <li>시스템 전체 에픽 총 개수</li>\n    <li>사용자가 보고 편집할 수 있는 페이지별 에픽 목록</li>\n  </ul>\n\n  <h2>Our Middleware Use Case: Observability</h2>\n  <p>이 글에서는 간단한 로깅 및 추적 ID를 사용하여 기본적인 관찰 가능성(Observability) 시스템을 구축하여 미들웨어를 탐색합니다. 실제 프로덕션 시스템에는 적합하지 않지만, TanStack Start 미들웨어를 이해하는 데 도움이 됩니다.</p>\n\n  <h2>First Server Function and Middleware</h2>\n  <p>간단한 에픽 목록을 가져오는 서버 함수 예시:</p>\n  <pre><code>\nexport const getEpicsList = createServerFn({ method: \"GET\" })\n  .inputValidator((page: number) => page)\n  .handler(async ({ data }) => {\n    const epics = await db\n      .select()\n      .from(epicsTable)\n      .offset((data - 1) * 4)\n      .limit(4);\n    return epics;\n  });\n  </code></pre>\n  <p>미들웨어는 서버 함수 실행 전후에 코드를 실행할 수 있도록 하며, 클라이언트와 서버 간 데이터 전달도 가능합니다. 기본적인 미들웨어 데모 코드는 다음과 같습니다:</p>\n  <pre><code>\nimport { createMiddleware } from \"@tanstack/react-start\";\n\nexport const middlewareDemo = createMiddleware({ type: \"function\" })\n  .client(async ({ next, context }) => {\n    console.log(\"client before\");\n    const result = await next({\n      sendContext: {\n        hello: \"world\",\n      },\n    });\n    console.log(\"client after\", result.context);\n    return result;\n  })\n  .server(async ({ next, context }) => {\n    console.log(\"server before\", context);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const result = await next({\n      sendContext: {\n        value: 12,\n      },\n    });\n    console.log(\"server after\", context);\n    return result;\n  });\n  </code></pre>\n  <p>이 미들웨어는 클라이언트와 서버에서 각각 실행되며, <code>sendContext</code>를 통해 데이터를 주고받을 수 있습니다.</p>\n\n  <h2>Running the Middleware</h2>\n  <p>미들웨어를 서버 함수에 추가하면 브라우저와 서버 콘솔에서 로그를 확인할 수 있습니다. SSR 시에는 클라이언트 미들웨어도 서버에서 실행됩니다.</p>\n\n  <h2>Building Real Middleware (Observability)</h2>\n  <p>더 현실적인 관찰 가능성 시스템을 구축하기 위해 미들웨어를 사용합니다. 클라이언트에서는 작업 시작 시간을 기록하고, 서버에서는 고유한 <code>traceId</code>를 생성하며 작업 시간을 측정합니다.</p>\n  <p><strong>문제점:</strong> TypeScript는 서버에서 <code>sendContext</code>에 추가된 <code>loggingId</code>를 클라이언트 측에서 바로 인식하지 못해 타입 오류를 발생시킵니다.</p>\n  <p><strong>해결책:</strong> 미들웨어를 분리하여 <code>await next()</code> 이후에 클라이언트 측에서 서버 결과를 처리하도록 구조를 변경합니다.</p>\n\n  <h2>Going Deeper: AsyncLocalStorage</h2>\n  <p><code>asyncLocalStorage</code>는 Node.js에서 비동기 작업 간의 컨텍스트를 유지하는 데 사용됩니다. 여러 서버 함수가 호출될 때 동일한 <code>traceId</code>를 공유하도록 하여 관찰 가능성을 향상시킵니다.</p>\n  <p>예를 들어, <code>updateEpic</code> 함수가 <code>getEpic</code> 함수를 호출할 때 <code>asyncLocalStorage</code>를 사용하여 <code>traceId</code>를 공유합니다. 이를 통해 여러 관련 작업에 대한 로그를 단일 <code>traceId</code>로 묶을 수 있습니다.</p>\n  <p>이러한 기능들을 통해 TanStack Start 미들웨어는 다양한 시나리오에 적용될 수 있습니다.</p>\n\n  <h2>Conclusion</h2>\n  <p>이 글은 TanStack Start 미들웨어의 기본적인 사용법과 고급 활용 사례를 소개했습니다. 다음 글에서는 'single-flight mutations'를 달성하기 위해 미들웨어를 한계까지 활용하는 방법을 다룰 예정입니다.</p>\n</body>\n","createdAt":"2025-10-24T18:59:02.000+00:00","link":"https://frontendmasters.com/blog/introducing-tanstack-start-middleware/","language":"ko"}