{"title":"Smashing Animations Part 5: Building Adaptive SVGs With `<symbol>`, `<use>`, And CSS Media Queries","content":"<body>\n<h2>반응형 SVG 구축을 위한 최적화 기법</h2>\n\n<p>SVG 코드를 정적 그래픽 또는 애니메이션에 사용하기 위해 준비하고 최적화하는 방법에 대해 많이 작성해 왔습니다. SVG 작업은 즐겁지만, 항상 신경 쓰이는 부분이 있었습니다. 바로 다양한 화면 크기에 맞춰 SVG 내부 요소의 위치와 크기를 유연하게 조정하는 것입니다.</p>\n\n<h3>문제점: viewBox의 한계</h3>\n<p>SVG의 <code>viewBox</code> 속성은 SVG의 크기를 조절하고 확대/축소되도록 하지만, 내부 요소의 위치는 원래 <code>viewBox</code>의 좌표 시스템에 고정되어 있어 데스크톱과 모바일 간의 레이아웃 변경이 어렵습니다. 이는 애니메이션과 상호작용이 요소 위치에 의존할 때 문제가 발생할 수 있습니다.</p>\n\n<h3>기존 해결 방법의 단점</h3>\n<ul>\n  <li><strong>두 개의 SVG 사용:</strong> CSS와 미디어 쿼리를 사용하여 두 개의 다른 SVG를 표시/숨김 처리하는 방식은, 복잡한 그래픽의 경우 불필요한 코드를 많이 다운로드하게 됩니다.</li>\n  <li><strong>JavaScript로 SVG 교체:</strong> JavaScript를 사용하여 지정된 지점에서 SVG를 교체하는 방식은, JavaScript가 디자인 표시의 중요 요소가 되고 두 SVG가 로드되어 DOM 복잡성과 불필요한 무게가 증가하며, 유지보수가 어렵습니다.</li>\n</ul>\n\n<h3>해결책: SVG Symbol 라이브러리 및 재활용</h3>\n<p>이 문제를 해결하기 위해, SVG의 <code>&lt;symbol&gt;</code> 요소를 활용하는 방법을 제안합니다. <code>&lt;symbol&gt;</code>은 재사용 가능한 SVG 요소를 정의하여 유지보수성을 높이고 코드 중복을 줄여줍니다. 이는 SVG를 위한 컴포넌트와 같습니다.</p>\n\n<h4><code>&lt;symbol&gt;</code> 사용 방법</h4>\n<ul>\n  <li>각 요소는 개별적으로 <code>viewBox</code>를 가지며, 앱(예: Sketch)에서 요소를 내보낼 때 개별 <code>viewBox</code> 크기에 맞춰 익스포트해야 합니다.</li>\n  <li>SVG 태그를 <code>&lt;symbol&gt;</code>로 바꾸고, 해당 내용을 SVG 라이브러리에 추가합니다.</li>\n  <li><code>&lt;use&gt;</code> 요소를 사용하여 동일한 심볼을 여러 번, 다른 위치나 크기로 삽입할 수 있습니다.</li>\n  <li><code>&lt;use&gt;</code> 요소는 <code>&lt;g&gt;</code> 그룹과 유사하게 작동하며, <code>width</code>, <code>height</code>, <code>transform</code> 속성을 사용하여 스케일링 및 이동이 가능합니다.</li>\n</ul>\n\n<h4><code>&lt;symbol&gt;</code> 애니메이션</h4>\n<p><code>&lt;symbol&gt;</code> 내부 요소는 직접 스타일링하거나 애니메이션할 수 없습니다. 대신, 애니메이션하려는 부분을 <code>&lt;symbol&gt;</code>로 만들거나, <code>&lt;use&gt;</code> 요소 내부에 <code>&lt;g&gt;</code> 요소를 추가하고, <code>href</code> 속성 값을 대상으로 하는 CSS 속성 선택자를 사용하여 애니메이션할 수 있습니다.</p>\n\n<h4>미디어 쿼리를 사용한 디스플레이 제어</h4>\n<p>작은 화면용 SVG와 큰 화면용 SVG를 각각 생성한 후, CSS 미디어 쿼리를 사용하여 특정 화면 크기에서 어떤 SVG를 표시할지 제어합니다. 기본적으로 작은 화면용 SVG를 표시하고, 특정 <code>min-width</code> 이상에서 큰 화면용 SVG로 전환합니다.</p>\n\n<h3>결론</h3>\n<p><code>&lt;symbol&gt;</code>, <code>&lt;use&gt;</code>, CSS 미디어 쿼리, 그리고 특정 <code>transform</code>을 결합하면, 콘텐츠를 중복하거나 추가 에셋을 로드하거나 JavaScript에 의존하지 않고 요소의 위치를 재조정하는 반응형 SVG를 구축할 수 있습니다. 각 그래픽은 숨겨진 심볼 라이브러리에 한 번만 정의하면 되며, 이를 여러 개의 표시된 SVG 내에서 필요에 따라 재사용할 수 있습니다. CSS가 레이아웃 전환을 처리하므로 빠르고 유연한 결과물을 얻을 수 있습니다. 이는 웹에서 강력한 기술이 대규모 프레임워크나 복잡한 도구 없이도, 약간의 SVG 지식과 기본 요소의 영리한 사용만으로도 구현될 수 있음을 상기시켜 줍니다.</p>\n</body>","createdAt":"2025-10-06T13:00:00.000+00:00","link":"https://smashingmagazine.com/2025/10/smashing-animations-part-5-building-adaptive-svgs/","language":"ko"}