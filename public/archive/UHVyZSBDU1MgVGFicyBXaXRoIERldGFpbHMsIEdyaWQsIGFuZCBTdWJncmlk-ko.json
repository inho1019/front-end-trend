{"title":"Pure CSS Tabs With Details, Grid, and Subgrid","content":"<body>\n  <h1>CSS로 탭 인터페이스 만들기 (Details, Grid, Subgrid 활용)</h1>\n  <p>\n    최신 웹 개발에서 CSS로 탭 인터페이스를 만드는 것은 매우 흥미로운 주제입니다. 이 글에서는 HTML의 <code>&lt;details&gt;</code> 태그를 CSS Grid와 Subgrid와 결합하여 접근성이 좋은 탭 인터페이스를 만드는 현대적인 접근 방식을 소개합니다.\n  </p>\n\n  <h2>HTML 구조</h2>\n  <p>\n    탭 인터페이스의 기본 구조는 다음과 같이 <code>&lt;details&gt;</code> 태그들을 부모 <code>.grid</code> 요소 안에 배치하는 것입니다. 각 <code>&lt;details&gt;</code> 요소는 하나의 탭을 나타냅니다.\n  </p>\n  <pre>\n&lt;div class=\"grid\"&gt;\n  &lt;details&gt;\n    &lt;summary&gt;First item&lt;/summary&gt;\n    &lt;div&gt;Content for the first tab&lt;/div&gt;\n  &lt;/details&gt;\n  &lt;details&gt;\n    &lt;summary&gt;Second item&lt;/summary&gt;\n    &lt;div&gt;Content for the second tab&lt;/div&gt;\n  &lt;/details&gt;\n  &lt;details&gt;\n    &lt;summary&gt;Third item&lt;/summary&gt;\n    &lt;div&gt;Content for the third tab&lt;/div&gt;\n  &lt;/details&gt;\n&lt;/div&gt;\n  </pre>\n\n  <h2>CSS 스타일링</h2>\n  <h3>1. CSS Grid를 이용한 레이아웃 설정</h3>\n  <p>\n    부모 <code>.grid</code> 요소에 CSS Grid를 적용하여 탭과 탭 패널을 위한 레이아웃을 설정합니다. 세 개의 열을 만들어 각 탭을 배치하고, 두 개의 행을 설정하여 탭과 활성 탭 패널을 구분합니다.\n  </p>\n  <pre>\n.grid {\n  display: grid;\n  grid-template-columns: repeat(3, minmax(200px, 1fr));\n  grid-template-rows: auto 1fr;\n  column-gap: 1rem;\n}\n  </pre>\n\n  <h3>2. Subgrid를 이용한 <code>&lt;details&gt;</code> 요소 정렬</h3>\n  <p>\n    <code>&lt;details&gt;</code> 요소에 Subgrid를 적용하여 부모 Grid의 선을 상속받도록 합니다. 이를 통해 <code>&lt;details&gt;</code> 요소들이 부모 Grid에 맞춰 깔끔하게 정렬됩니다. 또한, 각 <code>&lt;details&gt;</code> 요소가 전체 Grid 공간을 차지하도록 설정합니다.\n  </p>\n  <pre>\ndetails {\n  display: grid;\n  grid-template-columns: subgrid;\n  grid-template-rows: subgrid;\n  grid-column: 1 / -1;\n  grid-row: 1 / span 3;\n}\n  </pre>\n\n  <h3>3. 탭 패널 내용 배치 및 표시 제어</h3>\n  <p>\n    <code>::details-content</code>를 사용하여 탭 패널의 내용을 두 번째 행에 배치하고 세 개의 열에 걸쳐 확장되도록 합니다. <code>details:not([open])::details-content</code> 선택자를 사용하여 닫힌 탭의 내용은 숨깁니다.\n  </p>\n  <pre>\ndetails::details-content {\n  grid-row: 2;\n  grid-column: 1 / -1;\n  padding: 1rem;\n  border-bottom: 2px solid dodgerblue;\n}\n\ndetails:not([open])::details-content {\n  display: none;\n}\n  </pre>\n\n  <h3>4. <code>&lt;summary&gt;</code> 요소를 탭 레이블로 활용</h3>\n  <p>\n    <code>&lt;summary&gt;</code> 요소를 첫 번째 행에 배치하고 탭 레이블처럼 보이도록 스타일을 적용합니다. <code>details[open] summary</code> 선택자로 열린 탭의 <code>&lt;summary&gt;</code>에 강조 스타일을 적용합니다.\n  </p>\n  <pre>\nsummary {\n  grid-row: 1;\n  display: grid;\n  padding: 1rem;\n  border-bottom: 2px solid dodgerblue;\n  cursor: pointer;\n}\n\ndetails[open] summary {\n  font-weight: bold;\n}\n  </pre>\n\n  <h3>5. 탭 위치 지정</h3>\n  <p>\n    <code>:nth-of-type</code> 의사 클래스를 사용하여 각 <code>&lt;summary&gt;</code> 요소를 Grid의 해당 열에 배치하여 겹치지 않도록 합니다.\n  </p>\n  <pre>\ndetails:nth-of-type(1) summary {\n  grid-column: 1 / span 1;\n}\ndetails:nth-of-type(2) summary {\n  grid-column: 2 / span 1;\n}\ndetails:nth-of-type(3) summary {\n  grid-column: 3 / span 1;\n}\n  </pre>\n  <p>\n    CSS 변수와 템플릿 언어를 활용하면 코드를 더 간결하게 유지할 수 있습니다.\n  </p>\n\n  <h3>6. <code>z-index</code>를 이용한 겹침 문제 해결</h3>\n  <p>\n    모든 <code>&lt;summary&gt;</code> 요소가 겹치는 문제를 해결하기 위해 <code>z-index: 1;</code>을 적용하여 탭 레이블이 항상 위쪽에 보이도록 합니다.\n  </p>\n  <pre>\nsummary {\n  z-index: 1;\n}\n  </pre>\n\n  <h2>접근성</h2>\n  <p>\n    <code>&lt;details&gt;</code> 요소는 키보드 탐색 및 화면 판독기 지원과 같은 내장된 접근성 기능을 제공합니다. 이 방식은 추가적인 JavaScript 없이 순수 HTML과 CSS만으로 접근성이 좋은 탭 인터페이스를 구현할 수 있습니다.\n  </p>\n</body>\n","createdAt":"2025-10-27T14:33:17.000+00:00","link":"https://css-tricks.com/pure-css-tabs-with-details-grid-and-subgrid/","language":"ko"}