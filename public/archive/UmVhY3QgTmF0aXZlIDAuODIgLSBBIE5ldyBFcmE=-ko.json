{"title":"React Native 0.82 - A New Era","content":"<body>\n    <p>React Native 0.82 버전이 출시되었으며, 이는 새로운 아키텍처(New Architecture)만을 지원하는 최초의 릴리스입니다. 이 버전은 React Native의 중요한 이정표이며 새로운 시대의 시작을 알립니다. 향후 버전에서는 설치 크기 감소와 코드베이스 간소화를 위해 기존 아키텍처(Legacy Architecture) 코드가 제거될 예정입니다.</p>\n    <p>또한, 0.82 버전에는 Hermes V1이라는 더 최신 버전의 Hermes에 대한 실험적인 옵트인 기능이 포함되어 있습니다. React 버전을 19.1.1로 업데이트하여 여러 React 기능을 활성화하고 DOM 노드 API 지원을 추가했습니다.</p>\n    <h2>주요 내용</h2>\n    <ul>\n        <li>새로운 아키텍처만 지원</li>\n        <li>실험적인 Hermes V1</li>\n        <li>React 19.1.1</li>\n        <li>DOM 노드 API</li>\n    </ul>\n    <h2>새로운 아키텍처만 지원</h2>\n    <p>React Native 0.76부터 새로운 아키텍처가 기본값으로 설정되었습니다. 이제 0.82 버전부터는 새로운 아키텍처만이 유일한 지원 아키텍처가 됩니다. Android에서는 <code>newArchEnabled=false</code>, iOS에서는 <code>RCT_NEW_ARCH_ENABLED=0</code> 설정을 무시하고 새로운 아키텍처로 앱이 실행됩니다.</p>\n    <h2>마이그레이션 방법</h2>\n    <ul>\n        <li>아직 새로운 아키텍처로 마이그레이션하지 않았다면, React Native 0.81 또는 Expo SDK 54로 먼저 마이그레이션하는 것을 권장합니다. 이 버전들은 기존 아키텍처를 사용할 수 있는 마지막 버전이며, 새로운 아키텍처로의 마이그레이션을 돕는 경고 및 성능 개선 기능을 포함하고 있습니다.</li>\n        <li>0.81 버전에서 새로운 아키텍처를 활성화하고 앱이 정상적으로 작동하는지 확인한 후, 0.82 버전으로 안전하게 업데이트할 수 있습니다.</li>\n        <li>호환되지 않는 서드파티 라이브러리가 마이그레이션을 방해하는 경우, 해당 라이브러리 유지보수 담당자에게 직접 문의하는 것이 좋습니다.</li>\n        <li>React Native 코어의 버그가 마이그레이션을 방해하는 경우, 이슈 트래커를 통해 문의할 수 있습니다.</li>\n    </ul>\n    <h2>상호 운용 계층 및 서드파티 라이브러리 호환성</h2>\n    <p>향후에도 코드베이스에 상호 운용 계층(interop layers)이 유지됩니다. 상호 운용 계층에 필요한 모든 클래스와 함수는 가까운 시일 내에 제거되지 않을 것입니다. 상호 운용 계층 제거에 대한 추가 업데이트는 추후 공유될 예정입니다. 두 아키텍처 모두에 대한 하위 호환성을 제공하는 서드파티 라이브러리는 0.82 버전에서도 정상적으로 작동할 것입니다.</p>\n    <h2>기존 아키텍처 클래스 제거</h2>\n    <p>하위 호환성을 보장하고 호환성 문제를 줄이기 위해, 이번 릴리스에서는 기존 아키텍처의 API를 React Native 코어에서 제거하지 않습니다. 기존 아키텍처 제거는 전체 번들 크기를 상당히 줄일 수 있으며, 다음 React Native 버전부터 제거가 시작될 예정입니다. 자세한 내용은 RFC0929: Removal of the Legacy Architecture of React Native를 참조하십시오.</p>\n    <h2>실험적인 Hermes V1</h2>\n    <p>React Native 0.82는 Hermes V1을 옵트인할 수 있는 기능을 추가합니다. Hermes V1은 Hermes의 다음 진화 단계이며, 컴파일러와 VM의 개선을 통해 Hermes 성능을 향상시킵니다. 초기 테스트 결과, Hermes V1은 다양한 시나리오에서 기존 Hermes보다 뛰어난 성능을 보이며, 번들 로딩 및 TTI(Time to Interactive) 개선이 확인되었습니다. Expensify 앱에서의 실제 개선 사항은 다음과 같습니다.</p>\n    <ul>\n        <li><strong>Android (저사양 기기):</strong> 번들 로딩 시간 3.2% 향상, 전체 TTI 7.6% 향상, 콘텐츠 TTI 7.2% 향상</li>\n        <li><strong>iOS:</strong> 번들 로딩 시간 9% 향상, 전체 TTI 2.5% 향상, 콘텐츠 TTI 7.5% 향상</li>\n    </ul>\n    <p><strong>주의:</strong> Hermes V1은 아직 JS-to-native 컴파일 또는 React Native EU 2023에서 발표된 JIT 컴파일 기능을 포함하지 않습니다.</p>\n    <h3>Hermes V1 활성화 방법</h3>\n    <ul>\n        <li>Hermes V1은 실험 단계이므로, 소스에서 React Native를 빌드해야 합니다.</li>\n        <li><code>package.json</code> 파일에서 Hermes V1 컴파일러 패키지의 실험 버전을 강제로 해결하도록 수정합니다. (예: <code>\"hermes-compiler\": \"250829098.0.1\"</code>)</li>\n        <li>Android: <code>android/gradle.properties</code> 파일에 <code>hermesV1Enabled=true</code>를 추가하고, <code>android/settings.gradle</code>에서 React Native 빌드를 소스에서 하도록 구성합니다.</li>\n        <li>iOS: <code>RCT_HERMES_V1_ENABLED=1</code> 환경 변수를 설정하고 <code>bundle exec pod install</code>을 실행합니다.</li>\n        <li><strong>참고:</strong> Hermes V1은 미리 컴파일된 React Native 빌드와 호환되지 않으므로, <code>RCT_USE_PREBUILT_RNCORE</code> 플래그를 사용하지 않도록 주의하십시오.</li>\n        <li>앱에서 <code>HermesInternal.getRuntimeProperties()['OSS Release Version']</code>을 실행하여 Hermes V1이 정상적으로 실행되는지 확인할 수 있습니다.</li>\n    </ul>\n    <h2>React 19.1.1</h2>\n    <p>React Native 0.82 버전은 최신 React 안정 버전인 React 19.1.1을 포함합니다. 이 버전은 React Native에 대한 Owner Stacks 지원을 완전히 제공하며, <code>useDeferredValue</code> 및 <code>startTransition</code>의 안정성을 향상시킵니다.</p>\n    <h2>DOM 노드 API</h2>\n    <p>React Native 0.82부터 네이티브 컴포넌트는 ref를 통해 DOM과 유사한 노드를 제공합니다. 이를 통해 UI 트리를 탐색하고 레이아웃을 측정하는 등 웹과 유사한 방식으로 작업할 수 있습니다. 예를 들어, <code>ref.current.parentNode</code>, <code>ref.current.getBoundingClientRect()</code>와 같은 메소드를 사용할 수 있습니다. 기존 메소드(예: <code>measure</code>)도 계속 지원됩니다. 또한, 텍스트 노드 및 React Native 루트 노드를 나타내는 문서 노드에도 접근할 수 있게 됩니다.</p>\n    <h2>기타 변경 사항</h2>\n    <h3>웹 성능 API (카나리)</h3>\n    <p>웹의 성능 API(<code>performance.now()</code>, <code>PerformanceObserver</code> 등)의 일부가 React Native에 구현되었습니다. 현재는 카나리 릴리스 수준에서만 사용할 수 있으며, 향후 안정 버전으로 출시될 예정입니다.</p>\n    <h3>Android용 최적화된 디버그 빌드 타입</h3>\n    <p>React Native 0.82부터 개발 경험을 가속화하기 위해 <code>debugOptimized</code> 빌드 타입을 사용할 수 있습니다. 이 빌드 타입은 JavaScript 디버깅은 가능하면서 C++ 최적화를 활성화하여 애니메이션 및 리렌더링 성능을 향상시킵니다. 이 기능은 React Native 0.81 및 Expo SDK 54에도 백포트되었습니다.</p>\n    <h2>호환성 변경 사항</h2>\n    <ul>\n        <li>처리되지 않은 Promise 거부가 이제 <code>console.error</code>를 발생시킵니다.</li>\n        <li><code>ReactNativeFeatureFlags</code>를 <code>src/private</code>으로 이동했습니다.</li>\n        <li><code>Appearance.setColorScheme()</code>의 타입이 null 값을 허용하지 않도록 업데이트되었습니다.</li>\n        <li>iOS: <code>RCTDisplayLink</code>를 기존 API에서 마이그레이션했습니다.</li>\n        <li>Android: <code>com.facebook.react.bridge.JSONArguments</code> 클래스가 제거되었고, <code>MessageQueueThreadPerfStats</code>는 사용되지 않도록 변경되었습니다. Gradle 버전이 8.x에서 9.0.0으로 업데이트되었습니다.</li>\n        <li>C++: <code>CallbackWrapper.h</code> / <code>LongLivedObject.h</code>에 대한 백워드 호환성 헤더가 삭제되었습니다.</li>\n    </ul>\n    <p>전체 호환성 변경 사항 목록은 0.82 CHANGELOG에서 확인할 수 있습니다.</p>\n    <h2>업그레이드</h2>\n    <p>기존 프로젝트의 코드 변경 사항을 확인하려면 React Native Upgrade Helper를 사용하십시오. 새로운 프로젝트를 생성하려면 <code>npx @react-native-community/cli@latest init MyProject --version latest</code> 명령을 사용하십시오.</p>\n    <p>Expo 사용자의 경우, React Native 0.82는 <code>expo@canary</code> 릴리스의 일부로 제공됩니다. 다음 SDK인 SDK 55는 React Native 0.83의 다음 안정 버전과 함께 출시될 예정입니다.</p>\n    <p>0.82가 최신 안정 버전이며, 0.79.x 버전은 지원 중단됩니다.</p>\n</body>","createdAt":"2025-10-08T00:00:00.000+00:00","link":"https://reactnative.dev/blog/2025/10/08/react-native-0.82","language":"ko"}