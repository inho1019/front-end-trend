{"content":"<body>\n<h1>Resilience4j Circuit Breaker 적용 경험 요약</h1>\n\n<h2>들어가며</h2>\n<p>무더운 여름날 전기가 갑자기 끊기는 경험처럼, 소프트웨어 시스템에서도 유사한 상황이 발생할 수 있습니다. 이는 누전 차단기(Circuit Breaker)가 과전류로 인한 사고를 방지하는 원리와 같습니다. NHN Cloud에서는 Resilience4j Circuit Breaker를 도입하여 시스템 안정성을 높이고 장애 전파를 효과적으로 예방했습니다. 본문에서는 Resilience4j Circuit Breaker의 도입 배경, 동작 원리, 그리고 설정 옵션에 대해 자세히 다룹니다.</p>\n\n<h2>문제 상황: Circuit Breaker를 적용하게 된 배경</h2>\n<h3>서비스 장애 발생</h3>\n<p>API 또는 RPC를 통해 데이터를 주고받는 현대 서비스에서 특정 서비스가 응답하지 않으면, 호출한 서비스는 타임아웃될 때까지 기다리게 됩니다. 이로 인해 다른 서비스에 연쇄적인 영향을 미쳐 심각한 장애로 이어질 수 있습니다.</p>\n<h3>타임아웃이 서비스 장애로 이어지는 이유</h3>\n<p>애플리케이션은 스레드를 할당받아 작업을 처리하지만, 스레드 풀은 유한합니다. 특정 서비스 요청이 증가하면 스레드 풀이 모두 점유되어 새로운 요청을 처리할 수 없게 되고, 이는 타임아웃과 서비스 장애로 이어집니다.</p>\n<h3>Circuit Breaker로 문제 해결</h3>\n<p>Circuit Breaker는 서비스 호출 실패율이 설정된 임계값을 초과하면 해당 서비스 호출을 즉시 차단하고 오류를 발생시켜, 스레드 풀 점유를 방지하고 장애 전파를 막아 시스템 전체의 영향을 줄입니다.</p>\n\n<h2>Resilience4j란?</h2>\n<p>Resilience4j는 Netflix Hystrix에서 영감을 받아 함수형 프로그래밍으로 설계된 경량 내결함성 라이브러리입니다. Circuit Breaker 외에도 Bulkhead, RateLimiter, Retry, TimeLimiter, Cache 등의 모듈을 제공합니다. Netflix Hystrix는 현재 maintenance 모드이며 Resilience4j 사용이 권장됩니다.</p>\n\n<h2>Circuit Breaker란?</h2>\n<h3>상태 (State)</h3>\n<ul>\n  <li><strong>CLOSED:</strong> 정상적으로 요청을 처리하는 상태</li>\n  <li><strong>OPEN:</strong> 장애 상황으로 간주하여 모든 요청을 거부하는 상태</li>\n  <li><strong>HALF_OPEN:</strong> 장애 여부 확인을 위해 일시적으로 호출을 허용하는 상태</li>\n  <li><strong>DISABLED:</strong> Circuit Breaker가 비활성화된 상태</li>\n  <li><strong>FORCED_OPEN:</strong> 특정 조건에서 강제로 OPEN 상태로 변경된 상태</li>\n</ul>\n<h3>슬라이딩 윈도우 (Sliding Window)</h3>\n<ul>\n  <li><strong>Time-Based:</strong> 특정 기간의 호출 결과를 저장</li>\n  <li><strong>Count-Based:</strong> 특정 개수의 호출 결과를 저장</li>\n</ul>\n<h3>Circuit Breaker 동작</h3>\n<p>Circuit Breaker는 슬라이딩 윈도우 기반으로 호출 결과를 기록 및 집계하여 상태를 전환합니다. CLOSED 상태에서 시작하여 실패율이 임계치를 초과하면 OPEN 상태로 전환되고, 일정 시간이 지나거나 설정된 조건에 따라 HALF_OPEN 상태로 전환하여 서비스 장애 여부를 확인한 후 CLOSED 또는 OPEN 상태로 다시 전환합니다.</p>\n\n<h2>Resilience4j Circuit Breaker 설정 옵션</h2>\n<ul>\n  <li><strong>failureRateThreshold:</strong> 실패율 임계치 설정 (0 < 값 <= 100)</li>\n  <li><strong>slowCallDurationThreshold:</strong> 느린 요청 판단 기준 시간 설정 (기본값: 60초)</li>\n  <li><strong>slowCallRateThreshold:</strong> 느린 요청 비율 임계치 설정 (0 < 값 <= 100)</li>\n  <li><strong>slidingWindowType:</strong> 슬라이딩 윈도우 타입 설정 (COUNT_BASED 또는 TIME_BASED)</li>\n  <li><strong>slidingWindowSize:</strong> 슬라이딩 윈도우 크기 설정 (타입에 따라 초 또는 개수)</li>\n  <li><strong>minimumNumberOfCalls:</strong> 임계치 판단을 위한 최소 호출 수 설정 (기본값: 100)</li>\n  <li><strong>permittedNumberOfCallsInHalfOpenState:</strong> HALF_OPEN 상태에서 허용 가능한 호출 수 설정 (기본값: 10)</li>\n  <li><strong>waitDurationInOpenState / waitIntervalFunctionInOpenState:</strong> OPEN 상태에서 HALF_OPEN 상태로 전환하기 위한 대기 시간 설정 (기본값: 60초)</li>\n  <li><strong>automaticTransitionFromOpenToHalfOpenEnabled:</strong> OPEN에서 HALF_OPEN으로 자동 전환 여부 설정 (기본값: false)</li>\n  <li><strong>maxWaitDurationInHalfOpenState:</strong> HALF_OPEN 상태 유지 최대 시간 설정</li>\n  <li><strong>writableStackTraceEnabled:</strong> 오류 발생 시 stackTrace 출력 여부 설정 (기본값: false)</li>\n  <li><strong>recordException:</strong> 실패로 기록될 오류 판단 조건 설정</li>\n  <li><strong>recordResult:</strong> 응답 결과의 성공/실패 판단 조건 설정</li>\n  <li><strong>ignoreException:</strong> 호출 내역 집계에서 제외할 오류 판단 조건 설정</li>\n</ul>\n\n<h2>예제</h2>\n<p>슬라이딩 윈도우: Count-Based, Size=10, 최소 호출 수: 6, 실패 임계치: 50%를 가정하여 Circuit Breaker 상태 전환 예시를 보여줍니다.</p>\n<ul>\n  <li><strong>CLOSED 상태 유지:</strong> 최소 호출 수 미달 또는 실패율 임계치 미만</li>\n  <li><strong>CLOSED → OPEN 전환:</strong> 최소 호출 수 만족 및 실패율 임계치 초과</li>\n  <li><strong>HALF_OPEN → CLOSED 전환:</strong> 실패율 임계치 미만</li>\n  <li><strong>HALF_OPEN → OPEN 전환:</strong> 실패율 임계치 초과 또는 maxWaitDurationInHalfOpenState 시간 경과</li>\n</ul>\n\n<h2>나가며</h2>\n<p>Resilience4j Circuit Breaker의 설정 옵션에 대한 명확한 이해는 시스템 안정성 확보에 매우 중요합니다. 본 글이 Circuit Breaker 적용에 도움이 되기를 바랍니다.</p>\n</body>","createdAt":"2025-08-12T16:19:00.920Z","language":"ko"}