{"content":"```html\n<html>\n<body>\n<p>프론트엔드 개발자로서 웹사이트 코딩 방식을 탐구하며 디자인 시스템을 자주 살펴봅니다. 웹사이트 테마에 대한 깊은 고민은 Geoff Graham과의 대화에서 시작되었습니다.</p>\n<p>더 나은 테마, 더 높은 테마 유연성, 그리고 사이트에 생동감과 깊이를 더할 수 있는 더 많은 색상 사용 방법을 모색해왔습니다.</p>\n<h2>색상 팔레트</h2>\n<p>색상은 디자인의 핵심입니다. Tailwind CSS, Open Props, Pico CSS 등은 다양한 색조와 톤을 제공하여 디자인에 생기를 불어넣습니다. 하지만 이러한 라이브러리의 팔레트를 그대로 사용하기보다는 자신만의 색상 팔레트를 디자인하는 것이 중요합니다. 색상은 차별화, 독특함, 그리고 아이덴티티를 만듭니다. Bootstrap, Tailwind, shadcn 등을 사용하는 사이트들이 유사해 보이는 이유입니다.</p>\n<p>접근 가능한 색상 팔레트 제작에 대한 부담감 때문에 시작하기 어렵게 느껴질 수 있지만, 가장 중요한 것은 '충분한 대비'뿐입니다. 자신만의 색상 팔레트를 디자인하는 것은 웹사이트에 개성을 부여하는 첫걸음입니다.</p>\n<h3>수동으로 색상 팔레트 디자인하기</h3>\n<p>Figma와 같은 디자인 도구를 사용하여 수동으로 색상 팔레트를 디자인하는 것이 자연스러운 방법입니다. 색상 톤을 미리 정해두기보다는 디자인에 적용하면서 필요한 색상을 결정하는 것이 좋습니다. Splendid Labz의 예시처럼 필요한 톤만 사용하고, 필요에 따라 'd'와 같은 접미사를 붙여 변형된 색상을 만들 수 있습니다.</p>\n<h3>프로그래밍 방식으로 색상 팔레트 디자인하기</h3>\n<p>프로그래밍 방식으로 색상을 생성하는 것을 선호한다면 RampenSau, Perceptual Palettes, Accessible Palette Generator와 같은 도구를 활용할 수 있습니다. 특히 RampenSau는 색상 공간에 대한 깊은 지식을 가진 @meodai의 훌륭한 도구입니다. monochromatic 기능을 사용하면 편리합니다.</p>\n<h2>색상 팔레트 활용</h2>\n<p>다양한 색상 옵션을 제공함에도 불구하고 대부분의 시스템은 활용에 있어 제약이 많습니다. DaisyUI는 두 가지 톤만 지원하고, Pico CSS도 표면적으로는 10가지 이상의 변형을 제공하지만 실제로는 'Primary (one tone)', 'Background and background hover (two tones)' 등 각 '사물'당 두 가지 톤만 사용합니다. 색상이 중요한데 왜 제한적인 색상만 사용할 수 있게 하는가에 대한 질문에는 시스템 디자이너의 색상 민감도 부족, 의미론적 클래스 이름의 혼란, 단순한 가이드라인 제시 등이 원인일 수 있습니다.</p>\n<h3>의미론적 클래스 이름의 혼란</h3>\n<p>많은 프레임워크에서 사용하는 '의미론적 클래스 이름'은 웹 개발 커뮤니티에서 '의미론'이 무엇인지에 대한 혼란을 보여줍니다. 예를 들어, Pico CSS의 '--pico-primary-underline'과 '--pico-primary-border'는 언더라인과 보더가 같은 색상을 사용하여 통일된 효과를 낼 수 있음에도 불구하고 구분됩니다. '의미론'은 계층 구조 (primary, secondary 등)와 스타일링할 '사물'을 혼동하고 있습니다. 계층 구조는 색상 자체에 적용하고, 'oomph'나 가중치는 'outline', 'light', 'heavy', 'ghost'와 같은 동사로 표현하는 것을 제안합니다.</p>\n<p>이러한 분리를 통해 단일 계층 구조에 국한되지 않고 풍부한 색상 조합을 만들 수 있습니다. 또한 '--pico-primary-background'와 같이 의미론적 클래스 이름에 '사물'이 포함되면, 단일 배경색만 존재하거나 여러 색상을 사용할 때 혼란이 발생할 수 있습니다.</p>\n<h3>진정한 의미론</h3>\n<p>어원과 사전을 살펴보면 '의미론'은 '기호로 표시하다'와 '의미나 논리와 관련되다'는 것을 알 수 있습니다. 숫자 또한 100은 밝은 톤, 900은 어두운 톤을 나타내므로 의미론적일 수 있습니다. 우리는 이미 숫자 기반의 색상 팔레트를 통해 완벽하게 사용 가능한 의미론적 시스템을 가지고 있습니다.</p>\n<p>계층 구조는 색상 자체를 지칭하고, 예를 들어 분홍색을 주 색상(primary)으로 사용한다면 주황색을 보조 색상(secondary)으로 설정하는 간단한 방식으로 구현할 수 있습니다. CSS에서는 수동으로, Sass에서는 루프를 사용하여 빠르게 구현할 수 있습니다.</p>\n<p>Tailwind v3에서는 플러그인을 통해 유사한 기능을 구현할 수 있습니다. 이로 인해 많은 CSS 변수가 생성될 수 있지만, 성능에 미치는 영향은 크지 않을 것입니다. 이제 컴포넌트에서는 'background-1'이나 'background-2'와 같은 키워드를 외울 필요 없이 의미론적 숫자를 사용하면 됩니다.</p>\n<h3>의미론에 대한 추가 사항</h3>\n<p>대부분의 프레임워크는 컴포넌트 수준의 의미론을 올바르게 구현합니다. 예를 들어 Pico CSS에서는 컴포넌트별로 변수를 설정할 수 있습니다. 프로젝트 요구사항에 따라 네임스페이스 사용량을 줄여 코드를 간결하게 유지할 수 있습니다. 'Keep It Simple and Sweet' 원칙을 적용하는 것이 좋습니다.</p>\n<h2>전역 변수</h2>\n<p>일부 변수는 전역적으로 관리하여 사이트 전체에 쉽게 전파되도록 해야 합니다. 예를 들어 테두리 관련 변수(--border-width, --border-style, --border-color)를 전역으로 설정하면 --border-color 변수 하나만 변경해도 모든 테두리 색상이 일괄적으로 변경됩니다.</p>\n<p>이러한 방식을 사용하려면 컴포넌트를 해당 변수를 염두에 두고 구축해야 합니다. Tailwind 유틸리티나 Sass 믹스인을 통해 쉽게 구현할 수 있습니다. 컴포넌트에 전역 변수를 적용한 후, 특정 컴포넌트만 테마를 변경하고 싶을 때 --border-color와 같은 변수만 재정의하면 됩니다. 이를 통해 컴포넌트 네임스페이스 없이도 다양한 변형을 만들 수 있습니다.</p>\n<p>이 외에도 outline, transition 관련 변수들도 전역 변수로 관리하면 유용합니다.</p>\n<h2>이 모든 것의 중요성</h2>\n<p>단일 테마만 필요한 경우, 위에 논의된 내용을 건너뛰고 색상 팔레트만 사용하여 마무리할 수 있습니다. Pico CSS, DaisyUI 등에서 제공하는 시스템은 간단한 디자인의 여러 테마를 만들고자 할 때 충분할 수 있습니다.</p>\n<p>하지만 유연성과 다양한 색상 조합을 원한다면 제안된 방식과 같은 더 강력한 시스템이 필요합니다. 규모가 커질수록 사소했던 것들이 문제가 될 수 있다는 Jason Cohen의 글처럼, 필요에 따라 시스템을 개선하는 것이 중요합니다.</p>\n<p>Splendid Styles는 제가 디자인 시스템을 위해 만든 결과물이며, Splendid Layouts 또한 CSS 레이아웃에 대한 깊이 있는 접근 방식을 제공합니다. 즐겁게 테마를 만들어나가시길 바랍니다.</p>\n</body>\n</html>\n```","createdAt":"2025-08-12T16:06:18.240Z","language":"ko"}