{"title":"[Book] 소프트웨어 엔지니어 가이드북","content":"<body>\n    <h1>소프트웨어 엔지니어 가이드북 요약</h1>\n    <p>이 책은 Uber의 엔지니어링 매니저 출신인 Gergely Orosz가 소프트웨어 엔지니어의 커리어 전반에 대한 조언을 정리한 내용입니다. 책은 크게 5부로 구성되어 있으며, 각 부에서는 소프트웨어 엔지니어의 성장 단계별 필요한 역량과 태도에 대해 다룹니다.</p>\n\n    <h2>1부 개발자 커리어의 기본 사항</h2>\n    <ul>\n        <li>커리어 관리에 대한 중요성을 강조하며, 성과 평가, 승진, 이직 등을 주도적으로 관리해야 함을 역설합니다.</li>\n        <li>영어 능력의 중요성을 언급하며, 커리어 전반에 걸쳐 큰 영향을 미친다고 이야기합니다.</li>\n        <li>자신의 커리어에 대한 주인의식을 가지고 목표 설정, 추적, 개선을 지속적으로 해야 한다고 주장합니다.</li>\n        <li>피드백의 중요성을 강조하며, 건설적인 피드백은 성장의 기회로 삼고, 새로운 일을 시작할 때는 적극적으로 피드백을 구하는 것이 좋다고 말합니다.</li>\n        <li>매주 또는 격주로 성과를 기록하고 증거를 남기는 것이 중요하며, 이는 성과 평가뿐만 아니라 장기적인 커리어 관리에 도움이 된다고 설명합니다.</li>\n        <li>승진을 위해서는 조직의 엔지니어링 문제를 해결하고, 영향력과 역량을 동시에 보여주는 것이 중요하다고 강조합니다.</li>\n        <li>수평적 이동이나 새로운 기술 스택 학습과 같은 직업적 선택이 단기적인 보상은 적을지라도 장기적으로는 좋은 투자임을 언급합니다.</li>\n    </ul>\n\n    <h2>2부 유능한 소프트웨어 개발자</h2>\n    <ul>\n        <li>가장 중요하고 할당된 업무를 먼저 완료한 후에 새로운 일을 맡는 것이 생산적인 사람으로 인식되는 방법이라고 설명합니다.</li>\n        <li>매일 코딩하는 것이 유능한 소프트웨어 개발자로 성장하기 위한 필수 조건임을 강조합니다.</li>\n        <li>자신이 사용하는 도구와 프레임워크의 작동 원리를 깊이 있게 공부하는 '블럽 스터디'의 중요성을 언급하며, 이를 통해 지식과 기술의 깊이와 폭을 넓힐 수 있다고 말합니다.</li>\n    </ul>\n\n    <h2>3부 다재다능한 시니어 엔지니어</h2>\n    <ul>\n        <li>시니어 엔지니어에게 필요한 능력으로 복잡한 엔지니어링 문제를 실용적으로 해결하는 능력과 동료 및 매니저와의 효과적인 커뮤니케이션 능력을 꼽습니다.</li>\n        <li>QA 팀이 있더라도 기본적인 소프트웨어 테스트와 품질 보증에 대한 책임감을 가져야 한다고 지적합니다.</li>\n        <li>생산성이 높은 엔지니어는 기술적인 능력뿐만 아니라 제품, 고객, 비즈니스에 대한 이해도가 뛰어나 현명한 절충점을 찾는다고 설명합니다.</li>\n        <li>소프트웨어 엔지니어는 코드 작성 자체가 아닌, 코드 작성을 통해 비즈니스 문제를 해결하는 것으로 보수를 받는다고 명확히 합니다.</li>\n        <li>다른 사람에게 2인 협업을 요청하는 것을 두려워하지 말라고 조언하며, 이를 통해 일을 더 빨리 끝내고 새로운 지식을 배울 수 있다고 말합니다.</li>\n        <li>효과적인 멘토링은 멘티가 스스로 문제를 해결하도록 돕는 것이라고 정의합니다.</li>\n        <li>피드백을 제공하기 전에 질문을 먼저 하여 상대방의 작업에 대한 이해도를 높이는 것이 중요하다고 말합니다.</li>\n        <li>개인 브랜드를 구축하는 것은 중요하지만, 겉치레에 치중하지 않고 실속을 함께 갖추는 것이 중요하며, 외부 활동을 통해 긍정적인 이미지를 만드는 것이 좋다고 조언합니다.</li>\n        <li>풀스택 엔지니어링은 시니어 엔지니어에게 기본적인 기대치가 되고 있으며, 인접 스택에 대한 이해가 복잡한 풀스택 문제를 해결하는 데 도움이 된다고 설명합니다.</li>\n        <li>기술 부채를 속도와 품질의 절충안으로 여기고, 프로젝트 목표의 맥락에서 필요한 만큼만 관리하는 실용적인 태도를 강조합니다.</li>\n        <li>RFC 프로세스의 진정한 목표는 피드백을 조기에 받아 프로젝트 출시 시간을 단축하는 것임을 잊지 말아야 한다고 말합니다.</li>\n        <li>최종 결정은 없으므로, 분쟁이 발생하더라도 상황에 따라 유연하게 대처하는 것이 중요하다고 언급합니다.</li>\n    </ul>\n\n    <h2>4부 실용주의 테크리드</h2>\n    <ul>\n        <li>테크리드는 프로젝트 리더 또는 엔지니어링 팀의 프로젝트 총괄자로서, 사람들의 적응을 돕는 관리 책임을 맡는 경우가 많다고 설명합니다.</li>\n        <li>이해관계자 관리의 핵심은 모든 사람이 동일한 정보를 공유하여 프로젝트를 성공으로 이끄는 것이라고 강조합니다.</li>\n        <li>테크리드는 자신의 역할과 팀 내 명시적/암시적 역할을 명확히 파악하고, 매니저가 기대하는 바를 명확히 이해해야 한다고 말합니다.</li>\n        <li>프로세스는 목표가 될 수 없으며, 팀이 더 빠르고 효율적으로 업무를 처리할 수 있는 방법에 집중해야 한다고 주장합니다.</li>\n        <li>팀의 목표에 대한 명확성을 확인하는 방법으로, 팀원들에게 목표와 이유를 물어보고 답변이 일치하는지 확인하는 것을 제시합니다.</li>\n        <li>다른 팀과의 대화는 관계를 강화하는 좋은 방법이라고 언급합니다.</li>\n    </ul>\n\n    <h2>5부 롤모델로서의 스태프 및 수석 엔지니어</h2>\n    <ul>\n        <li>많은 엔지니어들이 북극성, KPI, OKR을 지루하게 여기지만, 프로젝트를 왜 해야 하는지에 대한 이해가 더 중요하다고 지적합니다.</li>\n        <li>OKR은 팀의 집중력을 높이는 도구지만, 과도하게 사용하면 결과 달성에 집착하게 될 위험이 있다고 경고합니다.</li>\n        <li>뛰어난 엔지니어링 팀은 엔지니어가 제품 담당자에게 KPI와 OKR에 대해 의문을 제기하는 문화를 가지고 있다고 설명합니다.</li>\n        <li>측정 방식이나 측정 대상의 조작 가능성에 대한 경고를 하며, 측정은 항상 어뷰징의 가능성을 염두에 두어야 한다고 말합니다.</li>\n        <li>시니어 엔지니어는 문제를 해결하고, 스태프+ 엔지니어는 문제를 발견하는 역할도 수행하며, 고객의 입장에서 생각하는 것이 문제를 찾는 확실한 방법이라고 강조합니다.</li>\n        <li>스태프+ 엔지니어는 비즈니스 측의 파트너가 되어야 한다고 말합니다.</li>\n        <li>조직 내 사람들에게 영향을 미치는 능력과 강력한 조직 네트워크는 분리할 수 없으며, 신뢰 자본 구축이 중요하다고 설명합니다.</li>\n        <li>신뢰를 '전문성, 책임감, 진실성의 합을 이익 추구 수준으로 나눈 값'으로 정의하는 공식을 소개합니다.</li>\n        <li>스태프+ 엔지니어는 코딩 시간을 줄이고 다른 중요한 일에 집중해야 한다고 말합니다.</li>\n        <li>간편한 스캐폴딩은 개발자의 생산성을 크게 높이며, 소프트웨어 템플릿 기능의 중요성을 언급합니다.</li>\n        <li>오늘날 엔지니어링 팀은 코드 모니터링 및 변경 사항 적용, 온콜 로테이션 정의 등의 역할을 직접 수행해야 한다고 설명합니다.</li>\n        <li>훌륭한 엔지니어는 배움을 멈추지 않고, 새로운 언어, 기술, 접근 방식을 시도하는 것을 두려워하지 않으며, 가르치는 것이 깊이 있게 배우는 가장 좋은 방법이라고 강조합니다.</li>\n    </ul>\n</body>","createdAt":"2025-10-10T10:44:25.000+00:00","link":"https://blog.outsider.ne.kr/1774","language":"ko"}