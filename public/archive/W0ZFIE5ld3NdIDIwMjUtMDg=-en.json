{"content":"```html\n<p>Here's a summary of the provided text, translated into English and formatted with HTML:</p>\n\n<h2>GitHub Updates & Reading Material</h2>\n\n<h3>JSNation 2025</h3>\n<p>The main JavaScript conference of the year, held in Amsterdam from June 12-16, 2025. It explored the future of the JavaScript ecosystem and fostered developer community connections. The event featured 53 speakers, 59 sessions, and 6 workshops. Notable sessions included:</p>\n<ul>\n  <li>Alex Russell's \"Frontend's Lost Decade and the Performance Inequality Gap\"</li>\n  <li>Vue.js and Vite creator Evan You's \"Vite and the Future of JavaScript Tooling\"</li>\n  <li>Matteo Collina's \"The State of Node.js 2025\"</li>\n</ul>\n<p>AI-related sessions were prominent, with workshops on \"Vibe coding\" using Cline, full-stack app development with Cursor, and motion control using multimodal LLMs. Other topics covered included contributing to web standards, distributed content with IPFS, and sustainable web development.</p>\n\n<h3>Tech-Verse 2025</h3>\n<p>A developer-centric conference hosted by LY Corporation from June 30 to July 1, 2025, sharing insights on the latest tech trends and development methodologies. Sessions covered Front-end development, serverless architecture, and AI-powered development. The Web Front-end category focused on modern JavaScript frameworks, performance optimization, and accessibility enhancements. The event offered localized content and networking opportunities for Korean developers.</p>\n\n<h3>AI Design Guide</h3>\n<p>A resource collection exploring new workflows and methodologies at the intersection of design and AI. It provides guidance on prompt writing, effective AI strategies, and practical tips for design automation, aiming to improve designer workflows with various tools and methods.</p>\n\n<h3>The New Code — Sean Grove, OpenAI</h3>\n<p>This article argues that in the AI era, the most valuable skill is communicating intent precisely, rather than just writing code. It discusses how specifications can become the primary unit of programming and why writing them is the new superpower, asserting that the ability to design system intent will be the most crucial skill for developers.</p>\n\n<h3>Can AI Replace Web Developers?</h3>\n<p>A discussion on whether AI can replace web developers, analyzing AI's current capabilities and limitations in web development. While AI can automate repetitive tasks like code generation and bug fixing, complex business logic, UX design, and creative problem-solving remain human domains. The article concludes that AI should be viewed as a tool to enhance developer productivity, fostering a collaborative rather than a replacement relationship.</p>\n\n<h3>Ultimate Guide to 'Vibe Coding'</h3>\n<p>A guide proposing a new approach to coding in the AI era, focusing on efficient and creative development with AI coding assistants. It covers mindset shifts, effective prompt writing, and understanding AI tool limitations, emphasizing that developers can focus more on high-level design and problem-solving.</p>\n\n<h3>My Experience With Claude Code After 2 Weeks of Adventures</h3>\n<p>A detailed account of a developer's two-week experience using Anthropic's Claude Code. The author highlights Claude's strengths in code generation, particularly in reading and understanding API documentation, integrating complex external APIs, and learning new libraries. Limitations such as a lack of knowledge of some frameworks are also noted, along with practical tips for maximizing Claude's effectiveness as a coding partner.</p>\n\n<h3>How I use Claude Code (+ my best tips)</h3>\n<p>This article offers practical tips for effectively using Anthropic's Claude Code, emphasizing its role as a pair programming partner. It suggests breaking down complex tasks, using Claude for code reviews and refactoring, and employing effective prompting techniques for in-depth technical conversations. The article balances Claude's strengths (syntax understanding, explanation capabilities) with its limitations (knowledge of the latest libraries, complex design patterns).</p>\n\n<h3>Translator API</h3>\n<p>A web standard that simplifies implementing text translation in web applications. This API leverages the browser's built-in translation capabilities for client-side translation without server dependency. It offers basic translation, language detection, and listing of translatable languages, along with error handling. Developers can use this API to efficiently build multilingual applications.</p>\n<pre><code>const translator = await Translator.create({\n  sourceLanguage: \"en\",\n  targetLanguage: \"ko\",\n});\n\nconst translation = await translator.translate(\"Hello, world!\");\nconsole.log(translation); // 안녕하세요, 세계입니다!</code></pre>\n\n<h3>Summary of the May 2025 TC39 plenary</h3>\n<p>Key advancements in JavaScript language and internationalization features were made at the May 2025 TC39 meeting. Proposals promoted to Stage 4 include Array.fromAsync, Explicit Resource Management, Error.isError, and Intl.Locale#variants. Stage 3 updates included Intl.Locale Info and Temporal, with Temporal's official release in Firefox. Discussions at Stage 2 covered Iterator Chunking, Math.clamp, and Seeded PRNG, while Stage 1 introduced new proposals like More random functions, Decimal, and Comparisons. Brainstorming on the web integration of AsyncContext aimed to solve complex context propagation issues.</p>\n\n<h3>WebAssembly: Yes, but for What?</h3>\n<p>Analyzing success and failure cases of WebAssembly (Wasm) at its 10th anniversary to identify patterns for successful deployment. Wasm has been successful in porting desktop applications to the web (e.g., Adobe Photoshop, Figma) and as components (e.g., SQLite, Perfetto). Outside the web, it's used in plugin systems, lightweight virtualization, and component models, particularly for fast cold starts in FaaS platforms. The article suggests future applications in kernel drivers and AI-based untrusted code execution, highlighting Wasm's growing importance in security-critical systems requiring isolation.</p>\n\n<h3>Is it still worth using jQuery in 2025?</h3>\n<p>While jQuery is still used on about 74% of websites, it's not recommended for new projects. jQuery emerged in 2006 to address cross-browser compatibility issues, simplifying DOM manipulation, event handling, and AJAX. Modern JavaScript now offers native equivalents (querySelector, addEventListener, fetch API), and CSS animations with Web Animations API handle visual effects. jQuery's persistence is due to CMS platforms like WordPress, legacy code, and plugin dependencies. For new projects, frameworks like React or Vue are preferred for large applications, and vanilla JavaScript for simpler features. jQuery remains useful for legacy systems and rapid prototyping, but modern alternatives are advisable for new projects.</p>\n\n<h3>JavaScript broke the web (and called it progress)</h3>\n<p>This article raises concerns that excessive JavaScript usage is undermining the web's fundamental values, impacting accessibility, performance, SEO, and user experience. It critiques the overreliance on client-side rendering, leading to slow initial loading and SEO challenges. High JavaScript dependency also excludes users with poor network conditions or disabled JavaScript. The author advocates for a progressive enhancement approach, building basic functionality without JavaScript first, then adding JavaScript incrementally to maintain accessibility and inclusivity.</p>\n\n<h3>The Many, Many, Many JavaScript Runtimes of the Last Decade</h3>\n<p>Over the past decade, numerous JavaScript runtimes like Node.js, Deno, Bun, and Hermes have emerged, expanding the execution environment. This article explores the origins, characteristics, and philosophies behind each runtime and how they differentiate themselves within the open-source ecosystem. While this proliferation offers developers more choices, it also presents new challenges in standardization and compatibility. The piece prompts reflection on the evolving landscape and future directions.</p>\n\n<h3>JavaScript scope hoisting is broken</h3>\n<p>Scope hoisting, once praised for optimizing bundle size and execution performance, can cause problems in large-scale applications. This article highlights practical limitations such as execution order errors, side effects, and `this` binding issues in code-splitting environments, using specific examples and examining the behavior of bundlers like Parcel and Webpack. It balances the benefits and risks of optimization, suggesting areas for future build tool development.</p>\n\n<h3>Color models for humans and devices</h3>\n<p>This comprehensive guide delves into how humans and devices perceive and represent color. It explains human color perception via three cone cells sensitive to red, green, and blue, leading to the development of the RGB color model. Based on experiments by the CIE, the XYZ color space was created, a standardized representation without negative values. Due to human sensitivity to green, the Y (luminance) calculation gives green the highest coefficient (0.7152). The article also covers non-linear transformations like sRGB's gamma correction for perceptual alignment and the use of color profiles and CICP in modern formats like AVIF for consistent cross-device color representation, including HDR processing and tone mapping.</p>\n\n<h3>The History of React Through Code</h3>\n<p>This article traces React's evolution with code examples, starting from Facebook's BoltJS framework issues in 2011. It details the development of FaxJS into FBolt and then React, with its first production use on Instagram's web version in 2012 and open-sourcing at JSConfUS in 2013. The text highlights React's core philosophies: JSX, Virtual DOM, the transition from class components to functional components and Hooks, and recent advancements like Server Components and Server Actions, showcasing the consistent evolution of its API design. It connects the introduction of the React Compiler to past design decisions like Hooks rules and StrictMode, emphasizing the React team's long-term vision and commitment to developer experience.</p>\n\n<h3>The Useless useCallback</h3>\n<p>This article critically examines the utility of `useCallback` and `useMemo` in React development, often used for referential stability. It argues that excessive memoization can unnecessarily complicate code and emphasizes the importance of discerning when referential stability is truly needed. The piece questions the practice of unnecessary optimization and touches upon future alternatives like the new React Compiler and `useEffectEvent`.</p>\n\n<h3>NuxtLabs joins Vercel</h3>\n<p>Vercel has acquired NuxtLabs, the developer of Nuxt. This integration positions Nuxt within Vercel's main framework offerings, signifying Vercel's strong commitment to the Vue.js ecosystem. The core NuxtLabs team will join Vercel to continue leading Nuxt's development, aiming to provide a more robust developer experience by leveraging Vercel's enterprise-grade infrastructure. This collaboration is expected to bring significant advancements in performance, scalability, and developer experience for the Nuxt framework.</p>\n\n<h2>Tutorials</h2>\n\n<h3>Mastering Claude Code</h3>\n<p>\"Mastering Claude Code\" is a comprehensive guide by Hwang Min-ho of Kakao on effectively utilizing Anthropic's Claude in a development environment. The guide covers core philosophies (flexibility, transparency, collaboration, context understanding), basic usage, and project customization. It details providing project context via `CLAUDE.md`, efficient development workflows, AI-augmented code reviews, and pair programming methodologies, with real-world examples and success metrics for integrating Claude into development processes.</p>\n\n<h3>Reactive State Manager With Proxies</h3>\n<p>This tutorial demonstrates how to build a Reactive State Manager using JavaScript's Proxy objects. It explains the principle of detecting state changes via `get`/`set` traps and automatically updating the UI with examples. Recommended for developers who want to create reactive systems without external libraries.</p>\n\n<h3>jsdate.wtf</h3>\n<p>An interactive website highlighting the confusing and unpredictable nature of JavaScript's `Date` object. It showcases examples of unexpected results from various input formats, differences between `new Date('2023-12-25')` and `new Date('2023/12/25')`, and the zero-based month index. It also illustrates timezone complexities and browser variations, implicitly recommending better date handling libraries or the Temporal API over the native `Date` object.</p>\n\n<h3>A Friendly Introduction to SVG</h3>\n<p>A comprehensive guide to SVG, covering basic concepts and practical applications. It emphasizes SVG as a first-class DOM citizen, enabling vector graphics manipulation via CSS and JavaScript. The tutorial explains the usage and attributes of basic shapes (, , , , ) with interactive examples, focusing on stroke properties (stroke-width, stroke-dasharray, stroke-linecap) for various visual effects. It details animation techniques using `stroke-dashoffset` for drawing effects, spinners, and runner animations, as well as precise animation control with `getTotalLength()` and `pathLength`.</p>\n\n<h2>Code & Tools</h2>\n\n<h3>n8n - Flexible AI workflow automation for technical teams</h3>\n<p>An open-source workflow automation platform beneficial for front-end developers for API integration and workflow automation. n8n supports both code and UI, allowing direct JavaScript or Python coding or drag-and-drop prototyping. It simplifies API integration by allowing cURL requests to be pasted directly, enhancing efficiency for backend API testing and data transformation. With over 500 integrations and extensibility via npm or Python libraries, it's actively developed (123.8k GitHub stars) and can be self-hosted via Docker for data privacy. It's useful for API mocking, data transformation, and automated testing environments, especially when combined with AI features.</p>\n\n<h3>Code Canvas App</h3>\n<p>A VSCode extension offering an innovative approach to code visualization and structuring. This tool places codebases on a visual canvas, allowing developers to intuitively understand relationships and overall structure. Features like visualizing file dependencies and grouping related code blocks significantly enhance code exploration and comprehension, improving collaboration and onboarding.</p>\n\n<h3>Context7</h3>\n<p>An MCP server designed to help LLMs access the latest documentation. It automatically detects document changes and integrates them into the LLM's context for up-to-date information, crucial for rapidly evolving tech fields or real-time data applications. Context7 enables LLMs to generate more accurate and relevant responses. By appending \"use context7\" to a prompt, users can ensure responses are based on the latest documents.</p>\n<p><code>Configure a Cloudflare Worker script to cache JSON API responses for five minutes. use context7</code></p>\n\n<h3>Awesome Context Engineering</h3>\n<p>A curated collection of resources on \"context engineering,\" an increasingly vital aspect of AI development. This repository systematically organizes papers, tools, and tutorials on context optimization, prompt engineering, retrieval-augmented generation (RAG), and learned information retrieval, focusing on context management methods to maximize LLM performance and ensure accurate, relevant responses.</p>\n\n<h3>Sequential Thinking for LLMs</h3>\n<p>An MCP server that provides dynamic, reflective problem-solving tools through structured thinking processes to help Large Language Models (LLMs) tackle complex problems more effectively. This approach guides LLMs to break down problems into steps rather than attempting a single solution, thereby enhancing their reasoning capabilities, particularly in programming, math, and complex decision-making.</p>\n\n<h3>SuperClaude Framework</h3>\n<p>An open-source project designed to maximize the performance of Anthropic's Claude models. The framework offers prompt templates, structured output formats, and optimized prompting strategies for complex tasks, particularly leveraging Claude's strengths in long context processing and complex reasoning. It provides practical guidance and usage examples for consistent, high-quality results in areas like code generation, data analysis, and content creation.</p>\n\n<h3>Bruno - API Client</h3>\n<p>An open-source IDE for API exploration and testing, serving as an alternative to Postman and Insomnia. Bruno's key feature is storing API collections directly in the filesystem, enabling version control via Git. It uses the Bru markup language for managing API request information, facilitating team collaboration and code reviews. Designed as an offline-first tool with no cloud sync, it prioritizes data privacy. It supports cross-platform use and offers API documentation, environment variable management, and script execution, providing a lightweight and fast experience.</p>\n<p><em>[Reference] Various API client tools can be found at: <a href=\"API Clients\">API Clients</a></em></p>\n\n<h3>es-toolkit/compat</h3>\n<p>Toss's open-source library, es-toolkit, has released es-toolkit/compat, ensuring 100% compatibility with Lodash while offering lighter weight and faster performance. Already adopted by major open-source projects like Storybook, Recharts, and CKEditor, and officially recommended by Nuxt, es-toolkit/compat's Lodash test cases allow for seamless replacement of existing Lodash code. It can serve as a transitional solution before optimizing with the original es-toolkit.</p>\n\n<h3>jsonrepair</h3>\n<p>An open-source tool for automatically repairing corrupted JSON data. It detects and corrects various JSON parsing errors, such as missing commas, quotes, and brace mismatches, making it a practical tool for developers working with unstructured JSON, especially for large datasets or external system integrations.</p>\n\n<h2>🧑🏻‍💻 from NAVER Front-end</h2>\n\n<h3>High-Performance Table Component Development with Windowing</h3>\n<p>This case study shares the development of \"Big Table,\" a high-performance table component using the windowing technique to improve the performance of NAVER's internal log system. Windowing, used in data streaming, machine learning, computer graphics, and React virtualization, processes data in fixed \"window\" units. In React, it optimizes performance by rendering only visible portions, with libraries like `react-virtualized`, `react-window`, and `@tanstack/react-virtual`. Big Table, developed to address issues with `react-window`, is based on actual `table` elements for easier CSS styling and uses `ResizeObserver` for automatic height calculation during row expansion/collapse. It can render 300,000 data entries smoothly and maintains over 55 FPS during column resizing.</p>\n\n<p><em>We visit you on the first Wednesday of every month!</em></p>\n```","createdAt":"2025-08-12T09:37:24.055Z","language":"en"}