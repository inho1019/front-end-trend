{"content":"<div>\n  <h2>자바스크립트 스코프 호이스팅의 동작 원리와 한계</h2>\n  <p>이 글은 자바스크립트 번들러의 최적화 기법인 스코프 호이스팅(scope hoisting)의 작동 방식과 그 한계점을 상세히 다룹니다. 스코프 호이스팅은 모듈들을 하나의 스코프로 묶어 번들 크기를 줄이고 실행 속도를 향상시키는 것을 목표로 하지만, 코드 스플리팅과의 충돌, 실행 순서에 따른 부작용, <code>this</code> 바인딩 문제 등으로 인해 실제 적용 시 효과가 제한적입니다.</p>\n  <p>저자는 Rollup, Webpack, Parcel 등 다양한 번들러의 구현 사례를 비교 분석하며, 왜 모듈을 함수로 감싸는 전통적인 방식이 여전히 유효한지에 대한 이유를 설명합니다. 스코프 호이스팅을 단순한 최적화 기법으로 이해하고 있었다면, 이 글을 통해 그 복잡성과 장단점을 깊이 있게 재고해볼 수 있습니다.</p>\n  <h3>주요 내용</h3>\n  <ul>\n    <li>코드 스플리팅 (code splitting)과의 관계</li>\n    <li>스코프 호이스팅으로 인한 부작용</li>\n    <li>발생 가능한 해결책</li>\n    <li>기타 문제점</li>\n    <li>스코프 호이스팅의 실질적인 가치</li>\n  </ul>\n</div>","createdAt":"2025-08-12T09:57:07.529Z","language":"ko"}